package org.example

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.callbackQuery
import com.github.kotlintelegrambot.dispatcher.handlers.CallbackQueryHandlerEnvironment
import com.github.kotlintelegrambot.dispatcher.text
import com.github.kotlintelegrambot.entities.*
import com.github.kotlintelegrambot.entities.keyboard.KeyboardButton
import com.mongodb.client.model.Filters
import com.mongodb.kotlin.client.coroutine.MongoClient
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import org.bson.codecs.pojo.annotations.BsonId
import org.bson.types.ObjectId
import org.luaj.vm2.Globals
import org.luaj.vm2.LoadState
import org.luaj.vm2.LuaValue
import org.luaj.vm2.compiler.LuaC
import org.luaj.vm2.lib.PackageLib
import org.luaj.vm2.lib.jse.CoerceJavaToLua
import org.luaj.vm2.lib.jse.CoerceLuaToJava
import org.luaj.vm2.lib.jse.JseBaseLib
import java.io.File
import java.time.Instant
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit
import java.util.*
import kotlin.math.ceil
import kotlin.math.max
import kotlin.reflect.KClass

const val author = "dev_vlad"
const val botToken = "7381702333:AAFDKZrYiSMi0Ugunm55v7syJcysS9gmcBY"
const val connectionString = "mongodb://localhost:27017/?retryWrites=true&w=majority"
const val gameDurationLimitHours = 3
const val gameHistoryTtlHours = 24
const val sendPendingAfterSec = 3
val lobbyStates = setOf(GameState.Connect, GameState.Rename, GameState.Dummy)
val numbers = arrayOf("0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£")
val dateFormat: DateTimeFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")

val client = MongoClient.create(connectionString = connectionString)
val db = client.getDatabase("mafia")
val database = Database(Config().path + "/data")
val accounts = database.collection("accounts", Account::chatId)
val games = database.collection("games", Game::id)
val gameHistory = database.collection("gameHistory", GameSummary::id)
val connections = database.collection("connections", Connection::id)
val pending = database.collection("pending", Pending::host)
val roles = database.collection("roles", Role::id)
val setups = database.collection("setups", Setup::id)
val pairings = database.collection("pairings", Pairing::id)
val orders = database.collection("orders", TypeOrder::id)
val types = database.collection("types", Type::id)
val ads = database.collection("ads", Message::id)
val bombs = database.collection("bombs", Bomb::id)
val checks = database.collection("checks", Check::name)
val kicks = database.collection("kicks", Kick::id)
val modes = database.collection("modes", GameMode::gameId)
val selections = database.collection("selections", Selection::id)
val hostInfos = database.collection("hostInfos", HostInfo::chatId)
val hostRequests = database.collection("hostRequests", UserId::chatId)
val admins = database.collection("admins", UserId::chatId)
val adminMenus = database.collection("adminMenus", AdminMenu::chatId)
val timers = database.collection("timers", Timer::chatId)
val internal = database.collection("internal", String::toString)
val adPopups = database.collection("adPopups", AdPopup::chatId)

val accountsMongo = db.getCollection<AccountOld>("accounts")
val gamesMongo = db.getCollection<Game>("games")
val connectionsMongo = db.getCollection<Connection>("connections")
val pendingMongo = db.getCollection<Pending>("pending")
val rolesMongo = db.getCollection<Role>("roles")
val setupsMongo = db.getCollection<Setup>("setups")
val pairingsMongo = db.getCollection<Pairing>("pairings")
val ordersMongo = db.getCollection<TypeOrder>("orders")
val typesMongo = db.getCollection<Type>("types")
val adsMongo = db.getCollection<Message>("ads")
val bombsMongo = db.getCollection<Bomb>("bombs")
val checksMongo = db.getCollection<Check>("checks")
val kicksMongo = db.getCollection<Kick>("kicks")
val modesMongo = db.getCollection<GameMode>("modes")
val selectionsMongo = db.getCollection<Selection>("selections")
val hostInfosMongo = db.getCollection<HostInfo>("hostInfos")
val hostRequestsMongo = db.getCollection<UserId>("hostRequests")
val adminsMongo = db.getCollection<UserId>("admins")
val adminMenusMongo = db.getCollection<AdminMenu>("adminMenus")
val timersMongo = db.getCollection<Timer>("timers")

val blankCommand = command("`", "default")
val deleteMsgCommand = command("–ó–∞–∫—Ä—ã—Ç—å", "deleteMsg", 1)

val joinCommand = command("", "join", 2)
val updateCommand = command("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä", "update", 1)

val playerNumCommand = command("", "playerNum", 3)
val playerConfirmCommand = command("–í–≤–µ—Å—Ç–∏ ‚ñ∂Ô∏è", "playerConfirm", 3)
val mainMenuCommand = command("üîô –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É", "mainMenu", 1)

val detailsCommand = command("", "details", 2)
val renameCommand = command("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", "rename", 2)
val positionCommand = command("–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä", "posi", 3)
val handCommand = command("‚úã", "hand", 1)
val kickCommand = command("‚ùå", "kick", 1)

val resetNumsCommand = command("–°–±—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤", "resetNums", 1)
val confirmResetCommand = command("–î–∞", "confirmReset", 2)

val unkickCommand = command("–í–ø—É—Å—Ç–∏—Ç—å", "unkick", 2)

val hostBackCommand = command("–ù–∞–∑–∞–¥", "back", 1)
val menuKickCommand = command(" –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤", "menuKick", 1)

val menuLobbyCommand = command("‚óÄÔ∏è –ú–µ–Ω—é –∏–≥—Ä–æ–∫–æ–≤", "menuLobby", 1)
val menuRolesCommand = command("–ú–µ–Ω—é —Ä–æ–ª–µ–π ‚ñ∂Ô∏è", "menuRoles", 1)
val menuPreviewCommand = command("–ú–µ–Ω—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ‚ñ∂Ô∏è", "menuPreview", 1)
val gameCommand = command("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É üéÆ", "game", 2)

val posSetCommand = command("–í–≤–µ—Å—Ç–∏ ‚ñ∂Ô∏è", "posSet", 3)

val nameCancelCommand = command("–û—Ç–º–µ–Ω–∞", "nameCancel", 1)

val dummyCommand = command("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", "dummy", 1)
val roleCommand = command("", "role", 2)
val incrCommand = command("‚ûï", "incr", 2)
val decrCommand = command("‚ûñ", "decr", 2)

val resetRolesCommand = command("–°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä —Ä–æ–ª–µ–π", "resetRoles", 2)
val previewCommand = command("üîÄ –†–∞–∑–¥–∞—Ç—å —Ä–æ–ª–∏", "preview", 2)
val updateRolesCommand = command("üîÑ –ü–µ—Ä–µ—Ä–∞–∑–¥–∞—Ç—å", "updRoles", 2)
val gameModeCommand = command("", "mode", 2)

val filterCommand = command("–§–∏–ª—å—Ç—Ä: –û—à–∏–±–∫–∞", "fltr", 1)

val dayDetailsCommand = command("", "dayDetails", 2)
val statusCommand = command("–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞", "status", 2)
val killCommand = command("üíÄ", "kill", 2)
val reviveCommand = command("üè©", "rviv", 2)
val fallCommand = command("", "fall", 2)

val dayBackCommand = command("‚óÄÔ∏è –ù–∞–∑–∞–¥", "dayBack", 1)

val settingsCommand = command("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings", 1)
val timerCommand = command("–¢–∞–π–º–µ—Ä", "timer")
val nightCommand = command("–ù–∞—á–∞—Ç—å –Ω–æ—á—å", "night", 1)

val selectCommand = command("", "select", 2)
val nextRoleCommand = command("–°–ª–µ–¥—É—é—â–∞—è —Ä–æ–ª—å", "nextRole", 1)
val skipRoleCommand = command("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skipRole", 1)

// todo add this coomand to all night menus
val cancelActionCommand = command("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", "cancelAction", 1)
val dayCommand = command("–ù–∞—á–∞—Ç—å –¥–µ–Ω—å", "day", 1)

val fallModeCommand = command("–†–µ–∂–∏–º —Ñ–æ–ª–ª–æ–≤", "fallMode", 2)
val detailedViewCommand = command("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤", "detailedMode", 2)
val timerDeleteCommand = command("‚ùåÔ∏è", "timerDelete", 1)
val timerStateCommand = command("", "timerState", 1)
val timerResetCommand = command("üîÑ", "timerReset", 1)

val gameInfoCommand = command("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ", "gameInfo", 1)

val updateCheckCommand = command("", "updateCheck", 2)

val hostRequestCommand = command("–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–µ–¥–µ–Ω–∏–µ", "hostRequests", 1)
val hostSettingsCommand = command("–°–ø–∏—Å–æ–∫ –≤–µ–¥—É—â–∏—Ö", "hostSettings", 1)

val timeLimitOnCommand = command("Off", "timeLimitOn", 2)
val timeLimitOffCommand = command("‚ùå", "timeLimitOff", 2)
val gameLimitOnCommand = command("Off", "gameLimitOn", 2)
val gameLimitOffCommand = command("‚ùå", "gameLimitOff", 2)
val shareCommand = command("Off", "share", 2)
val deleteHostCommand = command("‚ùå", "deleteHost", 2)
val allowHostCommand = command("‚úÖ", "allowHost", 2)
val denyHostCommand = command("‚ùå", "denyHost", 2)
val adminBackCommand = command("–ù–∞–∑–∞–¥", "adminBack", 1)

val sendAdCommand = command("", "sendAd", 1)
val sendAdHistoryCommand = command("", "sendAdHistory", 1)

val acceptNameCommand = command("–î–∞", "nameAccept", 3)
val cancelName = command("–ù–µ—Ç", "nameDeny", 2)

val acceptStopCommand = command("–î–∞", "stopAccept", 2)
val acceptLeaveCommand = command("–î–∞", "leaveAccept", 2)

val adCommand = command("/ad")
val adNewCommand = command("/newad")
val adminCommand = command("/admin")

val hostCommand = command("/host")
val rehostCommand = command("/rehost")
val updateForcedCommand = command("/update")
val startCommand = command("/start")
val menuCommand = command("/menu")

val changeNameCommand = command("–°–º–µ–Ω–∏—Ç—å –∏–º—è")
val stopGameCommand = command("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É")
val leaveGameCommand = command("–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É")

val resetAccount: Account.() -> Unit = {
    state = AccountState.Menu
    menuMessageId = -1L
    hostMessageId = -1L
    setupMessageId = -1L
    dayMessageId = -1L
    connectionId = null
}
val gameFilter: Connection.(Game) -> Boolean = { game -> gameId == game.id }

fun main() {
    //val connectionString = "mongodb://EdgeDom:WontH4CKAGA1n@localhost:44660/?retryWrites=true&w=majority"
    val roleNameLen = 32
    val roleDescLen = 280
    val path = Config().path

    val towns = mutableMapOf<Long, Town>()

    fun Bot.error(chatId: Long, text: String = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.") {
        val chat = ChatId.fromId(chatId)
        val res = sendMessage(
            chat,
            text
        )
        if (res.isSuccess) {
            editMessageReplyMarkup(
                chat,
                res.get().messageId,
                replyMarkup = inlineKeyboard {
                    button(deleteMsgCommand, res.get().messageId)
                }
            )
        }
    }

    val textHandler = TextHandler(errorProcessor = { bot.error(chatId) }) {
        val account = accounts.get(chatId)
        block(account == null) {
            any {
                initAccount(username, accounts, chatId, bot)
            }
        }

        if (isAdmin(chatId, username)) {
            simple(adCommand) {
                val chat = ChatId.fromId(chatId)
                bot.deleteMessage(chat, messageId ?: -1L)
                val active = games.find()
                val recent = gameHistory.find()
                val res = bot.sendMessage(
                    chat,
                    if (active.isNotEmpty() || recent.isNotEmpty()) "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:" else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä"
                )
                if (res.isSuccess) {
                    val msgId = res.get().messageId
                    bot.editMessageReplyMarkup(
                        chat,
                        msgId,
                        replyMarkup = inlineKeyboard {
                            if (active.isNotEmpty()) {
                                button(blankCommand named "–ê–∫—Ç–∏–≤–Ω—ã–µ")
                            }

                            fun name(game: Game, connections: List<Connection>) = (accounts.get(game.host)?.fullName()
                                ?: "") + " (" + dateFormat.format(
                                ZonedDateTime.ofInstant(
                                    game.createdAt.toInstant(),
                                    ZoneId.systemDefault()
                                )
                            ) + ") - ${connections.size} –∏–≥—Ä–æ–∫–æ–≤"

                            active.forEach {
                                button(sendAdCommand named name(it, connections.find { gameId == it.id }), it.id)
                            }
                            if (recent.isNotEmpty()) {
                                button(blankCommand named "–ù–µ–¥–∞–≤–Ω–∏–µ")
                            }
                            recent.forEach {
                                button(sendAdHistoryCommand named name(it.game, it.connections), it.id)
                            }
                            button(deleteMsgCommand, res.get().messageId)
                        }
                    )
                }
            }
            simple(adNewCommand) {
                val msgId = sendClosable("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                adPopups.save(AdPopup(ObjectId(), chatId, msgId))
            }
            simple(adminCommand) {
                if (messageId != null) {
                    bot.deleteMessage(ChatId.fromId(chatId), messageId)
                }
                val res = bot.sendMessage(
                    ChatId.fromId(chatId),
                    "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
                )
                if (res.isSuccess) {
                    val messageId = res.get().messageId
                    showAdmin(checks, chatId, messageId, bot)
                }
            }
            adPopups.get(chatId)?.let {
                any {
                    val chat = ChatId.fromId(chatId)
                    bot.deleteMessage(chat, messageId ?: -1L)
                    bot.deleteMessage(chat, it.messageId)
                    ads.save(Message(ObjectId(), query))
                    adPopups.delete(chatId)
                }
            }
        }

        when (account!!.state) {
            AccountState.Init -> {
                any {
                    val chat = ChatId.fromId(chatId)
                    val res = bot.sendMessage(
                        chat,
                        "–í–≤–µ–¥–µ–Ω–æ –∏–º—è: <b>$query</b>\n–í—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?",
                        parseMode = ParseMode.HTML
                    )

                    if (res.isSuccess) {
                        val msgId = res.get().messageId
                        bot.editMessageReplyMarkup(
                            chat,
                            msgId,
                            replyMarkup = inlineKeyboard {
                                row {
                                    button(acceptNameCommand, query, msgId, messageId ?: -1)
                                    button(cancelName, msgId, messageId ?: -1)
                                }
                            }
                        )
                    }
                }
            }

            AccountState.Menu -> {
                simple(hostCommand) {
                    if (!canHost(checks, hostInfos, { this.chatId == chatId }, hostRequests, chatId)) {
                        bot.error(chatId, "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
                        return@simple
                    }

                    try {
                        val id = games.save(Game(ObjectId(), chatId, Int.MAX_VALUE))
                        val game = games.get(id)
                        initGame(game, path, chatId, -1L, bot, messageId ?: -1L)
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                }
                simple(updateForcedCommand, menuCommand, startCommand) {
                    if (messageId != null) {
                        bot.deleteMessage(ChatId.fromId(chatId), messageId)
                        showGames(chatId, -1L, bot, games, accounts)
                    }
                }
                simple(changeNameCommand) {
                    bot.deleteMessage(ChatId.fromId(chatId), messageId ?: -1L)
                    initAccount(username, accounts, chatId, bot)
                }
            }

            AccountState.Admin -> {
                any {
                    val adminMenu = adminMenus.get(chatId)
                    if (adminMenu?.state == AdminState.HOST_TIME || adminMenu?.state == AdminState.HOST_GAMES) {
                        bot.deleteMessage(ChatId.fromId(chatId), adminMenu.descId)
                        val num: Int
                        try {
                            num = query.toInt()
                        } catch (e: NumberFormatException) {
                            bot.error(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ")
                            return@any
                        }

                        if (num > 0) {
                            val editFilter: HostInfo.() -> Boolean = { this.chatId == adminMenu.editId }
                            val hostInfo = hostInfos.find(editFilter).singleOrNull()
                            if (hostInfo != null) {
                                hostInfos.update(hostInfo.chatId) {
                                    if (adminMenu.state == AdminState.HOST_TIME) {
                                        timeLimit = true
                                        until = Date.from(Instant.now().plus(num.toLong(), ChronoUnit.DAYS))
                                    } else if (adminMenu.state == AdminState.HOST_GAMES) {
                                        gameLimit = true
                                        left = num
                                    }
                                }

                                showHostSettings(adminMenu.messageId, hostInfos, accounts, chatId, bot)
                                messageId?.let { id -> bot.deleteMessage(ChatId.fromId(chatId), id) }
                                adminMenus.update(chatId) {
                                    state = AdminState.NONE
                                    editId = -1L
                                    messageId = -1L
                                    descId = -1L
                                }
                            }

                            return@any
                        } else {
                            bot.error(chatId, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                        }
                    }
                    bot.error(chatId)
                }
            }

            AccountState.Host -> {
                simple(rehostCommand) {
                    bot.deleteMessage(ChatId.fromId(chatId), messageId ?: -1L)
                    if (!canHost(checks, hostInfos, { this.chatId == chatId }, hostRequests, chatId)) {
                        bot.error(chatId, "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
                        return@simple
                    }

                    games.find { host == chatId }.singleOrNull()?.let { game ->
                        //updateSetup(path, roles, game, types, orders)

                        games.update(game.id) {
                            state = GameState.Connect
                            playerCount = Int.MAX_VALUE
                        }
                        pending.deleteMany { host == chatId }
                        //setups.deleteMany { gameId == game.id }
                        pairings.deleteMany { gameId == game.id }
                        towns.remove(chatId)
                        accounts.update(chatId) {
                            hostMessageId = -1L
                            setupMessageId = -1L
                            dayMessageId = -1L
                            connectionId = null
                        }

                        showLobby(chatId, account.menuMessageId, connections, game, bot, accounts)
                    }
                }
                simple(stopGameCommand, menuCommand) {
                    val chat = ChatId.fromId(chatId)
                    val res = bot.sendMessage(
                        chat,
                        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É?"
                    )
                    if (res.isSuccess) {
                        val msgId = res.get().messageId
                        bot.editMessageReplyMarkup(
                            chat,
                            msgId,
                            replyMarkup = inlineKeyboard {
                                row {
                                    button(acceptStopCommand, accounts.get(chatId)?.menuMessageId ?: -1L, msgId)
                                    button(deleteMsgCommand named "–ù–µ—Ç", msgId)
                                }
                            }
                        )
                    }
                }
                simple(startCommand) {
                    games.find { host == chatId }.singleOrNull()
                        ?.let { game -> stopGame(gameFilter, game, towns, chatId, bot) }
                }
                any {
                    games.find { host == chatId }.singleOrNull()?.let { game ->
                        if (game.state == GameState.Dummy) {
                            connections.save(
                                Connection(
                                    ObjectId(),
                                    game.id,
                                    -1,
                                    query,
                                    "–æ—Ñ—Ñ–ª–∞–π–Ω",
                                    true
                                )
                            )
                            games.updateMany(
                                { host == chatId },
                                { state = GameState.Connect }
                            )
                            showLobby(chatId, account.menuMessageId, connections, game, bot, accounts)
                            bot.deleteMessage(ChatId.fromId(chatId), messageId ?: -1L)
                            return@any
                        } else if (game.state == GameState.Rename && account.connectionId != null) {
                            connections.get(account.connectionId!!)?.let { con ->
                                if (con.gameId == game.id) {
                                    val newName = query
                                    connections.update(con.id) {
                                        name = newName
                                    }
                                    games.update(game.id) {
                                        state = GameState.Connect
                                    }
                                    bot.deleteMessage(ChatId.fromId(chatId), messageId ?: -1L)
                                    /*bot.sendMessage(
                                        ChatId.fromId(chatId),
                                        "–ò–º—è –∏–≥—Ä–æ–∫–∞ " + (if (con.pos < Int.MAX_VALUE) "–Ω–æ–º–µ—Ä ${con.pos} " else "") +
                                                "–∏–∑–º–µ–Ω–µ–Ω–æ —Å ${con.name} –Ω–∞ $newName.",
                                    )*/
                                    showLobby(chatId, account.menuMessageId, connections, game, bot, accounts)
                                }
                                return@any
                            }
                        } else if (game.state == GameState.Num) {
                            val num = try {
                                query.toInt()
                            } catch (e: NumberFormatException) {
                                bot.error(chatId)
                                return@any
                            }
                            bot.deleteMessage(ChatId.fromId(chatId), messageId ?: -1L)
                            if (num > 0) {
                                hostSetPlayerNum(game, account.connectionId, num, account.menuMessageId, chatId, bot)
                            }
                        }
                    }
                }
            }


            AccountState.Lobby -> {
                connections.find { player == chatId }.singleOrNull()?.let { con ->
                    simple(leaveGameCommand, menuCommand, startCommand) {
                        val chat = ChatId.fromId(chatId)
                        bot.deleteMessage(chat, messageId ?: -1L)
                        val res = bot.sendMessage(
                            chat,
                            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É?"
                        )
                        if (res.isSuccess) {
                            val msgId = res.get().messageId
                            bot.editMessageReplyMarkup(
                                chat,
                                msgId,
                                replyMarkup = inlineKeyboard {
                                    row {
                                        // todo replace -1L with messageId
                                        button(acceptLeaveCommand, -1L, msgId)
                                        button(deleteMsgCommand named "–ù–µ—Ç", msgId)
                                    }
                                }
                            )
                        }
                    }
                    any {
                        games.get(con.gameId)?.let { game ->
                            if (game.state == GameState.Game) {
                                val chat = ChatId.fromId(game.host)
                                val res = bot.sendMessage(
                                    chat,
                                    "–ò–≥—Ä–æ–∫ ${con.pos} - ${con.name()} –ø–∏—à–µ—Ç:\n" + query,
                                )
                                if (res.isSuccess) {
                                    val msgId = res.get().messageId
                                    bot.editMessageReplyMarkup(
                                        chat,
                                        msgId,
                                        replyMarkup = inlineKeyboard {
                                            button(deleteMsgCommand, msgId)
                                        }
                                    )
                                }
                                return@any
                            } else {
                                val num: Int

                                try {
                                    num = query.toInt()
                                } catch (e: NumberFormatException) {
                                    bot.error(chatId)
                                    return@any
                                }

                                val value = if (con.pos == Int.MAX_VALUE) num else -1
                                bot.deleteMessage(ChatId.fromId(chatId), messageId ?: -1L)
                                setPlayerNum(game, con, value, accounts.get(chatId)?.menuMessageId ?: -1L, chatId, bot)
                                return@any
                            }
                        }
                        bot.error(chatId)
                    }
                }
            }

            else -> bot.error(chatId)
        }
    }

    val queryHandler = QueryHandler {
        parametrized(blankCommand) {

        }
        parametrized(deleteMsgCommand) {
            bot.deleteMessage(ChatId.fromId(chatId), long(0))
        }

        val chat = ChatId.fromId(chatId)
        parametrized(acceptNameCommand) {
            accounts.update(chatId) {
                name = str(0)
                state = AccountState.Menu
            }
            showMenu(chatId, games, accounts, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${str(0)}", bot)
            bot.deleteMessage(chat, long(1))
            bot.deleteMessage(chat, long(2))
        }
        parametrized(cancelName) {
            bot.deleteMessage(chat, long(0))
            bot.deleteMessage(chat, long(1))
        }

        menuQueries()

        connectionManagingQueries()
        parametrized(roleCommand) {
            roles.get(id(0))?.let { role ->
                sendClosable("–ù–∞–∑–≤–∞–Ω–∏–µ: ${role.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${role.desc}")
            }
        }
        adminQueries()
        hostQueries(path, towns, roleNameLen, roleDescLen)
        playerQueries(towns)
    }

    handleMigrations()

    val bot = bot {
        token = botToken
        dispatch {
            text {
                handle(message.text ?: "") by textHandler
            }

            callbackQuery {
                handle(callbackQuery.data) by queryHandler
            }
        }
    }

    runBlocking {
        launch {
            bot.startPolling()
        }

        launch {
            while (true) {
                try {
                    val now = Date()
                    val filter: Bomb.() -> Boolean = { date.before(now) }
                    bombs.find(filter).forEach {
                        bot.deleteMessage(ChatId.fromId(it.chatId), it.messageId)
                    }
                    bombs.deleteMany(filter)
                } catch (e: Exception) {
                    e.printStackTrace()
                }
                delay(10000)
            }
        }

        launch {
            while (true) {
                try {
                    hostInfos.deleteMany {
                        (timeLimit && until.before(Date())) || (gameLimit && left < 1)
                    }
                } catch (e: Exception) {
                    e.printStackTrace()
                }
                delay(60000)
            }
        }

        launch {
            while (true) {
                try {
                    val set = mutableSetOf<Long>()
                    pending.find { date.toInstant().isBefore(Instant.now().minusSeconds(sendPendingAfterSec.toLong())) }.forEach {
                        set.add(it.host)
                    }
                    pending.deleteMany { true }
                    set.forEach {
                        accounts.get(it)?.let {
                            games.find { host == it.chatId }.singleOrNull()?.let { game ->
                                if (game.state == GameState.Connect) {
                                    showLobby(it.chatId, it.menuMessageId, connections, game, bot, accounts)
                                }
                            }
                        }
                    }
                } catch (e: Exception) {
                    e.printStackTrace()
                }
                delay(1000)
            }
        }

        launch {
            while (true) {
                try {
                    timers.find { active }.forEach {
                        val now = System.currentTimeMillis()

                        val update = now - it.timestamp
                        timers.update(it.chatId) {
                            time += update
                            timestamp = now
                            if (timerText(it.time) != timerText(it.time + update)) {
                                updated = true
                            }
                        }
                    }
                    timers.find { updated }.forEach {
                        updateTimer(it, bot, timers)
                    }
                } catch (e: Exception) {
                    e.printStackTrace()
                }
                delay(200)
            }
        }

        launch {
            while (true) {
                try {
                    games.find {
                        createdAt.toInstant().isBefore(Instant.now().minusSeconds(gameDurationLimitHours * 60 * 60L))
                    }.forEach {
                        stopGame(
                            gameFilter,
                            it,
                            towns,
                            it.host,
                            bot,
                            accounts.get(it.host)?.menuMessageId ?: -1L
                        )
                    }
                } catch (e: Exception) {
                    e.printStackTrace()
                }
                delay(60000)
            }
        }

        launch {
            while (true) {
                try {
                    gameHistory.deleteMany {
                        playedAt.toInstant().isBefore(Date().toInstant().minusSeconds(gameHistoryTtlHours * 60 * 60L))
                    }
                } catch (e: Exception) {
                    e.printStackTrace()
                }
                delay(60000)
            }
        }
    }
}

private fun isAdmin(chatId: Long, username: String) =
    username == author || admins.get(chatId) != null

private fun initGame(game: Game?, path: String, chatId: Long, messageId: Long, bot: Bot, deleteId: Long) {
    if (game != null) {
        updateSetup(path, roles, game, types, orders)
        val chat = ChatId.fromId(chatId)
        bot.deleteMessage(chat, deleteId)
        bot.sendMessage(
            chat,
            "–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤.",
            replyMarkup = footerKeyboard {
                button(stopGameCommand)
            }
        )
        val msgId = showLobby(chatId, messageId, connections, game, bot, accounts, true)
        accounts.update(chatId) {
            state = AccountState.Host
            menuMessageId = msgId
        }
    } else {
        error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    }
}

private suspend fun ContainerBlock.ParametrizedContext.adminQueries() {
    if (isAdmin(chatId, username)) {
        parametrized(updateCheckCommand) {
            updateCheck(str(0), checks)
            showAdmin(checks, chatId, long(1), bot)
        }
        parametrized(hostRequestCommand) {
            showHostRequests(hostRequests, accounts, long(0), chatId, bot)
        }
        parametrized(hostSettingsCommand) {
            showHostSettings(long(0), hostInfos, accounts, chatId, bot)
        }
        parametrized(timeLimitOnCommand) {
            val res = bot.sendMessage(ChatId.fromId(chatId), "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –¥–Ω—è—Ö:")
            if (res.isSuccess) {
                val desc = res.get().messageId
                openAdminMenu(desc, AdminState.HOST_TIME)
            }
        }
        parametrized(timeLimitOffCommand) {
            hostInfos.update(long(0)) { timeLimit = false }
            showHostSettings(long(1), hostInfos, accounts, chatId, bot)
        }
        parametrized(gameLimitOnCommand) {
            val res = bot.sendMessage(ChatId.fromId(chatId), "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä:")
            if (res.isSuccess) {
                val desc = res.get().messageId
                openAdminMenu(desc, AdminState.HOST_GAMES)
            }
        }
        parametrized(gameLimitOffCommand) {
            hostInfos.update(long(0)) { gameLimit = false }
            showHostSettings(long(1), hostInfos, accounts, chatId, bot)
        }
        parametrized(shareCommand) {
            hostInfos.get(long(0))?.let {
                hostInfos.update(long(0)) { canShare = !it.canShare }
                showHostSettings(long(1), hostInfos, accounts, chatId, bot)
            }
        }
        parametrized(deleteHostCommand) {
            hostInfos.delete(long(0))
            showHostSettings(long(1), hostInfos, accounts, chatId, bot)
        }
        parametrized(allowHostCommand) {
            hostInfos.save(HostInfo(ObjectId(), long(0)))
            hostRequests.delete(long(0))
            showHostRequests(hostRequests, accounts, long(1), chatId, bot)
        }
        parametrized(denyHostCommand) {
            hostRequests.delete(long(0))
            showHostRequests(hostRequests, accounts, long(1), chatId, bot)
        }
        parametrized(adminBackCommand) {
            showAdmin(checks, chatId, long(0), bot)
            accounts.update(chatId) {
                state = AccountState.Menu
            }
            adminMenus.delete(chatId)
        }
        parametrized(sendAdCommand) {
            val game = games.get(id(0))
            if (game != null) {
                showAd(game, connections.find { gameId == game.id }, bot)
            } else {
                gameHistory.find { this.game.id == id(0) }.lastOrNull()?.let {
                    showAd(it.game, it.connections, bot)
                }
            }
        }
        parametrized(sendAdHistoryCommand) {
            gameHistory.get(id(0))?.let {
                showAd(it.game, it.connections, bot)
            }
        }
    }
}

fun showAd(game: Game, connections: List<Connection>, bot: Bot) {
    val host = game.host
    val ad = ads.find().firstOrNull()
    fun send(chatId: Long) {
        if (ad != null) {
            val res = bot.sendMessage(
                ChatId.fromId(chatId),
                ad.text
            )
            if (res.isSuccess) {
                bombs.save(
                    Bomb(
                        ObjectId(),
                        chatId,
                        res.get().messageId,
                        Date(System.currentTimeMillis() + 1000 * 60 * 60)
                    )
                )
            }
        }
    }
    send(host)
    connections.forEach {
        send(it.player)
    }
}

private fun ParametrizedProcessor.HandlerContext.openAdminMenu(desc: Long, state: AdminState) {
    accounts.update(chatId) {
        this.state = AccountState.Admin
    }
    if (adminMenus.get(chatId) == null) {
        adminMenus.save(
            AdminMenu(
                ObjectId(),
                chatId,
                state,
                long(0),
                long(1),
                desc
            )
        )
    } else {
        adminMenus.update(chatId) {
            this.state = state
            editId = long(0)
            messageId = long(1)
            descId = desc
        }
    }
}

private suspend fun ContainerBlock.ParametrizedContext.menuQueries() {
    parametrized(joinCommand) {
        val game = games.get(id(0))
        val messageId = long(1)
        if (game == null || game.state == GameState.Game) {
            bot.sendMessage(
                ChatId.fromId(chatId),
                if (game == null) {
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ. –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                } else {
                    "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ. –í–µ–¥—É—â–∏–π —É–∂–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É. –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                }
            )
            showGames(chatId, messageId, bot, games, accounts)
            return@parametrized
        }

        withAccount(accounts, chatId) { account ->
            if (account.state != AccountState.Menu) {
                bot.sendMessage(
                    ChatId.fromId(chatId),
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º."
                )
                return@withAccount
            }

            val kick = kicks.find { gameId == game.id && player == chatId }.singleOrNull()
            if (kick != null) {
                bot.sendMessage(
                    ChatId.fromId(chatId),
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ. –í–µ–¥—É—â–∏–π –∏—Å–∫–ª—é—á–∏–ª –≤–∞—Å –∏–∑ –∏–≥—Ä—ã."
                )
                return@withAccount
            }

            if (messageId != -1L) {
                bot.deleteMessage(ChatId.fromId(chatId), messageId)
            }
            bot.sendMessage(
                ChatId.fromId(chatId),
                "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.",
                replyMarkup = footerKeyboard {
                    button(leaveGameCommand)
                }
            )
            val id = ObjectId()
            connections.save(
                Connection(
                    id,
                    game.id,
                    chatId,
                    account.name,
                    if (username.isNotBlank()) "@$username" else ""
                )
            )
            accounts.update(chatId) {
                state = AccountState.Lobby
                menuMessageId = -1L
                hostMessageId = -1L
            }
            // todo check if it can be replaced by simple edit reply
            pending.save(Pending(ObjectId(), game.host))
            bot.deleteMessage(ChatId.fromId(chatId), messageId)
            val msgId = showNumPrompt(chatId, -1L, bot, id)
            accounts.update(chatId) {
                menuMessageId = msgId
            }
        }
    }
    parametrized(updateCommand) {
        showGames(chatId, long(0), bot, games, accounts)
    }
}

private suspend fun ContainerBlock.ParametrizedContext.connectionManagingQueries() {
    /** with Connection **/
    block({ notNull { if (isId(0)) connections.get(id(0)) else null } }) { con ->
        /** with Game **/
        block({ notNull { games.get(con.gameId) } }) { game ->
            parametrized(playerNumCommand) {
                connections.update(id(0)) {
                    pos = int(1)
                }
                pending.save(Pending(ObjectId(), game.host))
                bot.editMessageReplyMarkup(
                    ChatId.fromId(chatId),
                    long(2),
                    replyMarkup = numpadKeyboard(
                        "–ù–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞",
                        playerNumCommand,
                        playerConfirmCommand,
                        mainMenuCommand,
                        id(0),
                        int(1),
                        long(2)
                    )
                )
            }
            parametrized(playerConfirmCommand) {
                setPlayerNum(game, con, int(1), long(2), chatId, bot)
            }

            /** is game host **/
            block(game.host == chatId) {
                parametrized(detailsCommand) {
                    bot.editMessageReplyMarkup(
                        ChatId.fromId(chatId),
                        long(1),
                        replyMarkup = inlineKeyboard {
                            row {
                                button(blankCommand named con.name())
                                button(
                                    positionCommand named (if (con.pos < Int.MAX_VALUE) con.pos.toString() else "–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä"),
                                    con.id,
                                    0,
                                    messageId ?: -1L
                                )
                            }
                            row {
                                button(renameCommand, id(0), long(1))
                                if (!con.bot) {
                                    button(handCommand, id(0))
                                }
                                button(kickCommand, id(0))
                            }
                            button(menuLobbyCommand, long(1))
                        }
                    )
                }
                parametrized(renameCommand) {
                    if (game.state != GameState.Connect) {
                        return@parametrized
                    }
                    games.update(game.id) {
                        state = GameState.Rename
                    }
                    accounts.update(chatId) {
                        connectionId = con.id
                    }

                    bot.editMessageReplyMarkup(
                        ChatId.fromId(chatId),
                        long(1),
                        replyMarkup = inlineKeyboard {
                            row { button(command("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${con.name()}", "default")) }
                            row { button(nameCancelCommand, long(1)) }
                        }
                    )
                }
                parametrized(positionCommand) {
                    accounts.update(chatId) {
                        connectionId = con.id
                    }
                    games.update(game.id) {
                        state = GameState.Num
                    }
                    bot.editMessageReplyMarkup(
                        ChatId.fromId(chatId),
                        long(2),
                        replyMarkup = numpadKeyboard(
                            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${con.name()}",
                            positionCommand,
                            posSetCommand,
                            hostBackCommand,
                            id(0),
                            int(1),
                            long(2)
                        )
                    )
                }
                parametrized(handCommand) {
                    if (!con.bot) {
                        bot.sendMessage(
                            ChatId.fromId(con.player),
                            "–í–µ–¥—É—â–∏–π –ø—Ä–æ—Å–∏—Ç –≤–∞—Å –ø–æ–¥–Ω—è—Ç—å —Ä—É–∫—É"
                        )
                    }
                }

                parametrized(kickCommand) {
                    connections.delete(con.id)
                    if (!con.bot) {
                        accounts.update(con.player) {
                            state = AccountState.Menu
                        }
                        showMenu(
                            con.player,
                            games,
                            accounts,
                            "–í–µ–¥—É—â–∏–π –∏—Å–∫–ª—é—á–∏–ª –≤–∞—Å –∏–∑ –∏–≥—Ä—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                            bot
                        )
                        kicks.save(
                            Kick(
                                ObjectId(),
                                con.gameId,
                                con.player
                            )
                        )
                    }
                    // todo update by game id not host chat id
                    pending.save(Pending(ObjectId(), chatId))
                }
                parametrized(posSetCommand) {
                    hostSetPlayerNum(game, id(0), int(1), long(2), chatId, bot)
                }
            }
        }
    }
}

private fun hostSetPlayerNum(
    game: Game,
    connectionId: ObjectId?,
    pos: Int,
    messageId: Long,
    chatId: Long,
    bot: Bot
) {
    if (pos > 0 && connectionId != null) {
        connections.update(connectionId) {
            this.pos = pos
        }
    }
    games.update(game.id) {
        state = GameState.Connect
    }
    showLobby(chatId, messageId, connections, game, bot, accounts)
}

private fun setPlayerNum(
    game: Game,
    con: Connection,
    pos: Int,
    messageId: Long,
    chatId: Long,
    bot: Bot
) {
    if (pos > 0) {
        connections.update(con.id) {
            this.pos = pos
        }
    }
    pending.save(Pending(ObjectId(), game.host))
    if (messageId != -1L) {
        bot.editMessageReplyMarkup(
            ChatId.fromId(chatId),
            messageId,
            replyMarkup = inlineKeyboard {
                button(blankCommand named "–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã:")
                button(blankCommand named "–û–∂–∏–¥–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤")
            }
        )
        accounts.update(con.player) {
            menuMessageId = messageId
        }
    }
}

private fun <T : Any> numpadKeyboard(
    title: String,
    numCommand: Command,
    acceptCommand: Command?,
    cancelCommand: Command,
    target: T,
    value: Int,
    messageId: Long
) =
    inlineKeyboard {
        row { button(blankCommand named title) }
        fun KeyboardContext.RowContext.digitButton(it: Int) = button(
            numCommand named it.toString(),
            target,
            if (value == 0) it else value * 10 + it,
            messageId
        )

        val text = if (value == 0) "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else value.toString()
        row { button(blankCommand named text) }
        (1..9).chunked(3).forEach {
            row {
                it.forEach {
                    digitButton(it)
                }
            }
        }
        row {
            button(blankCommand)
            digitButton(0)
            button(
                numCommand named "‚å´",
                target,
                if (value.toString().length > 1) value.toString().dropLast(1) else "0",
                messageId
            )
        }
        row {
            button(cancelCommand, messageId)
            if (value != 0 && acceptCommand != null) {
                button(acceptCommand, target, value, messageId)
            }
        }
    }

private suspend fun ContainerBlock.ParametrizedContext.hostQueries(
    path: String,
    towns: MutableMap<Long, Town>,
    roleNameLen: Int,
    roleDescLen: Int
) {
    /** with Game of this host **/
    block({ notNull { games.find { host == chatId }.singleOrNull() } }) { game ->
        parametrized(menuKickCommand) {
            showKickMenu(game, long(0), bot, chatId)
        }
        parametrized(resetNumsCommand) {
            val chat = ChatId.fromId(chatId)
            val res = bot.sendMessage(
                chat,
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤?",
            )
            if (res.isSuccess) {
                val msgId = res.get().messageId
                bot.editMessageReplyMarkup(
                    chat,
                    msgId,
                    replyMarkup = inlineKeyboard {
                        row {
                            button(confirmResetCommand, long(0), msgId)
                            button(deleteMsgCommand named "–ù–µ—Ç", msgId)
                        }
                    }
                )
            }
        }
        parametrized(confirmResetCommand) {
            bot.deleteMessage(ChatId.fromId(chatId), long(1))
            connections.find { gameId == game.id }.forEach { con ->
                connections.update(con.id) {
                    pos = Int.MAX_VALUE
                }
                if (!con.bot) {
                    accounts.get(con.player)?.let { acc ->
                        bot.deleteMessage(ChatId.fromId(acc.chatId), acc.menuMessageId)
                        val msgId = showNumPrompt(acc.chatId, -1L, bot, con.id)
                        accounts.update(con.player) {
                            menuMessageId = msgId
                        }
                    }
                }
            }
            accounts.get(chatId)?.let {
                showLobby(chatId, it.menuMessageId, connections, game, bot, accounts)
            }
        }
        parametrized(hostBackCommand, menuLobbyCommand) {
            games.update(game.id) {
                state = GameState.Connect
            }
            showLobby(chatId, long(0), connections, game, bot, accounts)
        }
        parametrized(menuRolesCommand) {
            games.update(game.id) {
                state = GameState.Roles
            }
            if (setups.find { gameId == game.id && count > 0 }.isEmpty()) {
                setups.deleteMany { gameId == game.id }
                roles.find { gameId == game.id }.forEach {
                    setups.save(Setup(ObjectId(), it.id, game.id, it.name, it.index))
                }
            }
            showRoles(chatId, long(0), setups, connections, bot, game)
        }
        parametrized(menuPreviewCommand) {
            games.update(game.id) {
                state = GameState.Preview
            }
            showPreview(bot, chatId, long(0), pairings, connections, game)
        }
        parametrized(gameCommand) {
            val cons = connections.find { gameId == game.id }
            val numMap = mutableMapOf<Int, Int>()
            cons.forEach {
                numMap.compute(it.pos) { _, v ->
                    if (v == null) 1 else v + 1
                }
            }
            val noNum = cons.filter { it.pos == Int.MAX_VALUE }
            if (noNum.isNotEmpty()) {
                sendClosable("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:\n" + noNum.joinToString("\n") { "–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${it.name()}" })
                return@parametrized
            }
            val errors = numMap.filter { it.value > 1 }.toList()
            if (errors.isNotEmpty()) {
                sendClosable("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:\n" + errors.joinToString("\n") { "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º ${it.first}" })
                return@parametrized
            }

            val roleList = setups.find { gameId == game.id }
            val roleCount = roleList.sumOf { it.count }
            if (cons.size != roleCount) {
                sendClosable("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–æ–ª–µ–π.\n–ò–≥—Ä–æ–∫–æ–≤: ${cons.size}\n–†–æ–ª–µ–π: $roleCount")
                return@parametrized
            }
            val pairs =
                pairings.find { gameId == game.id }
                    .associate { connections.get(it.connectionId) to roles.get(it.roleId) }
            val errorCons = cons.filter { !pairs.containsKey(it) }
            if (errors.isNotEmpty()) {
                sendClosable("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:\n" + errorCons.joinToString("\n") { "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${it.name()}" })
                return@parametrized
            }

            modes.save(
                GameMode(
                    ObjectId(),
                    game.id,
                    Mode.OPEN
                )
            )
            hostInfos.updateMany(
                { this.chatId == chatId && this.gameLimit },
                { left -= 1 }
            )
            bot.editMessageReplyMarkup(
                ChatId.fromId(chatId),
                long(1),
                replyMarkup = inlineKeyboard {
                    button(blankCommand named "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã")
                    Mode.entries.forEach {
                        button(gameModeCommand named it.type, it.name, long(1))
                    }
                    button(menuPreviewCommand named "–ù–∞–∑–∞–¥", long(1))
                }
            )
        }

        parametrized(nameCancelCommand) {
            if (game.state !in setOf(GameState.Rename, GameState.Dummy)) {
                return@parametrized
            }
            games.update(game.id) {
                state = GameState.Connect
            }
            accounts.update(chatId) {
                connectionId = null
            }
            showLobby(chatId, long(0), connections, game, bot, accounts)
        }

        parametrized(dummyCommand) {
            if (game.state != GameState.Connect) {
                return@parametrized
            }
            games.update(game.id) {
                state = GameState.Dummy
            }
            bot.editMessageReplyMarkup(
                ChatId.fromId(chatId),
                long(0),
                replyMarkup = inlineKeyboard {
                    row { button(command("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞", "default")) }
                    row { button(nameCancelCommand, long(0)) }
                }
            )
        }
        parametrized(decrCommand) {
            setups.update(id(0)) {
                count = max(count - 1, 0)
            }
            showRoles(chatId, long(1), setups, connections, bot, game)
        }
        parametrized(incrCommand) {
            setups.update(id(0)) {
                count = max(count + 1, 0)
            }
            showRoles(chatId, long(1), setups, connections, bot, game)
        }
        parametrized(resetRolesCommand) {
            setups.updateMany({ gameId == id(0) }) {
                count = 0
            }
            showRoles(chatId, long(1), setups, connections, bot, game)
        }
        parametrized(previewCommand, updateRolesCommand) {
            modes.deleteMany { gameId == game.id }
            deleteUserTimers(timers, bot) { this.chatId == chatId }

            var roleCount = 0
            val roleList = mutableListOf<Role>()
            setups.find { gameId == game.id }.forEach {
                roleCount += it.count
                val role = roles.get(it.roleId)!!
                (1..it.count).forEach { _ ->
                    roleList.add(role)
                }
            }

            games.update(game.id) {
                state = GameState.Preview
            }
            pairings.deleteMany { gameId == game.id }
            val cons = mutableListOf<Connection>()
            connections.find { gameFilter(game) }.sortedWith(compareBy({ it.pos }, { it.createdAt })).forEach {
                cons.add(it)
            }
            roleList.shuffle()
            roleList.indices.forEach {
                val role = roleList[it]
                val con = cons[it]
                pairings.save(
                    Pairing(
                        ObjectId(),
                        game.id,
                        con.id,
                        role.id
                    )
                )
            }
            showPreview(bot, chatId, long(1), pairings, connections, game)
        }

        parametrized(gameModeCommand) {
            Mode.valueOf(str(0)).let { mode ->
                modes.update(game.id) { this.mode = mode }
                bot.deleteMessage(ChatId.fromId(chatId), long(1))
                startGame(
                    accounts,
                    setups,
                    roles,
                    path,
                    pairings,
                    orders,
                    types,
                    chatId,
                    towns,
                    roleNameLen,
                    roleDescLen,
                    games,
                    bot,
                    modes
                )
            }
        }
        parametrized(settingsCommand) {
            modes.get(game.id)?.let {
                val res = bot.sendMessage(
                    ChatId.fromId(chatId),
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    replyMarkup = inlineKeyboard { button(blankCommand named "–ó–∞–≥—Ä—É–∑–∫–∞...") }
                )
                if (res.isSuccess) {
                    val messageId = res.get().messageId
                    bot.editMessageReplyMarkup(
                        ChatId.fromId(chatId),
                        messageId,
                        replyMarkup = settingsButtons(it, messageId, long(0))
                    )
                }
            }
        }
        parametrized(nightCommand) {
            try {
                accounts.update(chatId) {
                    menuMessageId = -1L
                }
                deleteUserTimers(timers, bot) { this.chatId == chatId }
                towns[chatId]?.let { town ->
                    bot.sendMessage(
                        ChatId.fromId(chatId),
                        "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–Ω—è:\n${shortLog(town)}"
                    )
                    town.actions.clear()
                    town.updateTeams()
                    town.prepNight()

                    showNightRole(town, chatId, bot)
                }
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
        parametrized(timerCommand) {
            if (timers.get(chatId) == null) {
                val res = bot.sendMessage(
                    ChatId.fromId(chatId),
                    "–¢–∞–π–º–µ—Ä: 00:00"
                )
                if (res.isSuccess) {
                    val messageId = res.get().messageId
                    val timer = Timer(ObjectId(), chatId, messageId, System.currentTimeMillis(), 0L)
                    timers.save(
                        timer
                    )
                }
            }
        }
        parametrized(timerDeleteCommand) {
            timers.get(chatId)?.let {
                deleteTimer(timers, it, bot)
            }
        }
        parametrized(timerStateCommand) {
            timers.update(chatId) {
                active = !active
                updated = true
                timestamp = System.currentTimeMillis()
            }
        }
        parametrized(timerResetCommand) {
            timers.update(chatId) {
                updated = true
                time = 0L
                timestamp = System.currentTimeMillis()
            }
        }

        parametrized(unkickCommand) {
            kicks.get(id(0))?.let { kick ->
                accounts.get(kick.player)?.let { _ ->
                    kicks.delete(id(0))
                    showKickMenu(game, long(1), bot, chatId)
                }
            }
        }

        parametrized(acceptStopCommand) {
            stopGame(gameFilter, game, towns, chatId, bot, long(0), long(1))
        }

        block({ notNull { towns[chatId] } }) { town ->
            val mode = modes.get(game.id)
            parametrized(dayDetailsCommand) {
                accounts.get(chatId)?.let { acc ->
                    val msgId = if (acc.menuMessageId != -1L) acc.menuMessageId else long(1)
                    showPlayerDayDesc(town, mode?.fallMode?: false, int(0), msgId, chatId, bot)
                }
            }
            parametrized(dayBackCommand) {
                showDay(town, chatId, long(0), towns, accounts, bot, "", "", modes, game)
            }
            parametrized(statusCommand) {
                town.changeProtected(int(0))
                if (mode?.detailedView == true) {
                    accounts.get(chatId)?.let { acc ->
                        val msgId = if (acc.menuMessageId != -1L) acc.menuMessageId else long(1)
                        showPlayerDayDesc(town, modes.get(game.id)?.fallMode ?: false, int(0), msgId, chatId, bot)
                    }
                } else {
                    showDay(town, chatId, long(1), towns, accounts, bot, "", "", modes, game)
                }
            }
            parametrized(killCommand) {
                town.setAlive(int(0), false)
                if (mode?.detailedView == true) {
                    accounts.get(chatId)?.let { acc ->
                        val msgId = if (acc.menuMessageId != -1L) acc.menuMessageId else long(1)
                        showPlayerDayDesc(town, modes.get(game.id)?.fallMode ?: false, int(0), msgId, chatId, bot)
                    }
                } else {
                    showDay(town, chatId, long(1), towns, accounts, bot, "", "", modes, game)
                }
            }
            parametrized(reviveCommand) {
                town.setAlive(int(0), true)
                if (mode?.detailedView == true) {
                    accounts.get(chatId)?.let { acc ->
                        val msgId = if (acc.menuMessageId != -1L) acc.menuMessageId else long(1)
                        showPlayerDayDesc(town, modes.get(game.id)?.fallMode ?: false, int(0), msgId, chatId, bot)
                    }
                } else {
                    showDay(town, chatId, long(1), towns, accounts, bot, "", "", modes, game)
                }
            }
            parametrized(fallCommand) {
                val pos = int(0)
                val person = town.playerMap[pos]
                if (person != null) {
                    person.fallCount += 1
                }
                if (mode?.detailedView == true) {
                    accounts.get(chatId)?.let { acc ->
                        val msgId = if (acc.menuMessageId != -1L) acc.menuMessageId else long(1)
                        showPlayerDayDesc(town, modes.get(game.id)?.fallMode ?: false, int(0), msgId, chatId, bot)
                    }
                } else {
                    showDay(town, chatId, long(1), towns, accounts, bot, "", "", modes, game)
                }
            }
            parametrized(selectCommand) {
                nightSelection(town, int(0), chatId, long(1), bot)
            }
            parametrized(nextRoleCommand) {
                showNightRole(town, chatId, bot)
            }
            parametrized(skipRoleCommand) {
                town.index++
                showNightRole(town, chatId, bot)
            }
            parametrized(dayCommand) {
                startDay(town, chatId, towns, accounts, bot, modes, game)
            }
            if (mode != null) {
                parametrized(filterCommand) {
                    towns[chatId]?.let { town ->
                        val index =
                            if (DayView.entries.size > mode.dayView.ordinal + 1) mode.dayView.ordinal + 1 else 0
                        val next = DayView.entries[index]
                        modes.update(game.id) {
                            dayView = next
                        }
                        showDay(town, chatId, long(0), towns, accounts, bot, "", "", modes, game)

                    }
                }
                parametrized(fallModeCommand) {
                    modes.update(game.id) { fallMode = !fallMode }
                    showDay(town, chatId, long(1), towns, accounts, bot, "", "", modes, game)
                    bot.editMessageReplyMarkup(
                        ChatId.fromId(chatId),
                        long(0),
                        replyMarkup = settingsButtons(mode.copy(fallMode = !mode.fallMode), long(0), long(1))
                    )
                }
                parametrized(detailedViewCommand) {
                    modes.update(game.id) { detailedView = !detailedView }
                    showDay(town, chatId, long(1), towns, accounts, bot, "", "", modes, game)
                    bot.editMessageReplyMarkup(
                        ChatId.fromId(chatId),
                        long(0),
                        replyMarkup = settingsButtons(mode.copy(detailedView = !mode.detailedView), long(0), long(1))
                    )
                }
            }
        }
    }
}

fun showPlayerDayDesc(town: Town, fallMode: Boolean, playerPos: Int, messageId: Long, chatId: Long, bot: Bot) {
    town.playerMap[playerPos]?.let<Person, Unit> { player ->
        bot.editMessageReplyMarkup(
            ChatId.fromId(chatId),
            messageId,
            replyMarkup = inlineKeyboard {
                button(blankCommand named "–î–µ—Ç–∞–ª–∏")
                button(dayDetailsCommand named desc(player), playerPos, messageId)
                row {
                    playerDayDesc(player, messageId, fallMode)
                }
                button(dayBackCommand, messageId)
            }
        )
        return@let
    }
}

private fun stopGame(
    gameFilter: Connection.(Game) -> Boolean,
    game: Game,
    towns: MutableMap<Long, Town>,
    chatId: Long,
    bot: Bot,
    gameMessageId: Long = -1L,
    popupMessageId: Long = -1L
) {
    games.delete(game.id)
    connections.find { gameFilter(game) }.forEach {
        if (it.bot) {
            return@forEach
        }
        accounts.update(it.player, resetAccount)
        showMenu(
            it.player,
            games,
            accounts,
            "–í–µ–¥—É—â–∏–π –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.",
            bot,
            forceUpdate = true,
            silent = true
        )
    }
    connections.deleteMany {
        gameFilter(game)
    }
    kicks.deleteMany { gameId == game.id }
    pending.deleteMany { host == chatId }
    setups.deleteMany { gameId == game.id }
    pairings.deleteMany { gameId == game.id }
    modes.deleteMany { gameId == game.id }
    towns.remove(chatId)
    accounts.update(chatId, resetAccount)
    deleteUserTimers(timers, bot) { this.chatId == chatId }
    val chat = ChatId.fromId(chatId)
    bot.deleteMessage(chat, gameMessageId)
    bot.deleteMessage(chat, popupMessageId)
    showMenu(chatId, games, accounts, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", bot, true)
}

private fun showKickMenu(game: Game, messageId: Long, bot: Bot, chatId: Long) {
    bot.editMessageReplyMarkup(
        ChatId.fromId(chatId),
        messageId,
        replyMarkup = inlineKeyboard {
            button(blankCommand named "–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏")
            kicks.find { gameId == game.id }.forEach {
                accounts.get(it.player)?.let { acc ->
                    button(blankCommand named acc.fullName())
                    button(unkickCommand, it.id, messageId)
                }
            }
            button(hostBackCommand, messageId)
        }
    )
}

private suspend fun ContainerBlock.ParametrizedContext.playerQueries(towns: MutableMap<Long, Town>) {
    block({ notNull { connections.find { player == chatId }.singleOrNull() } }) { con ->
        block({ notNull { games.get(con.gameId) } }) { game ->
            parametrized(gameInfoCommand) {
                if (game.state == GameState.Game) {
                    val mode = modes.get(game.id)?.mode
                    val roleMap = getRoles(setups, game, roles)
                    val playerCount = roleMap.map { it.value }.sum()
                    val players =
                        towns[game.host]?.let { getPlayerDescs(checks, con, pairings, it, games) }
                            ?: emptyList()
                    val desc =
                        (if (mode != null) "<b>–¢–∏–ø –∏–≥—Ä—ã</b>: ${mode.type}\n${mode.desc}\n\n" else "") +
                                "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤</b>: $playerCount\n\n${roleDesc(roleMap)}" +
                                (if (players.size > 1) "\n\n<b>–ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ</b>:\n" + players.joinToString(
                                    "\n"
                                ) else "")
                    bot.sendMessage(
                        ChatId.fromId(chatId),
                        desc,
                        parseMode = ParseMode.HTML
                    )
                }
            }
            parametrized(mainMenuCommand) {
                bot.deleteMessage(ChatId.fromId(chatId), long(0))
                leaveGame(
                    accounts,
                    chatId,
                    accounts.get(chatId)?.menuMessageId ?: -1L,
                    resetAccount,
                    pending,
                    con,
                    connections,
                    games,
                    bot
                )
            }
            parametrized(acceptLeaveCommand) {
                bot.deleteMessage(ChatId.fromId(chatId), long(0))
                bot.deleteMessage(ChatId.fromId(chatId), long(1))
                leaveGame(
                    accounts,
                    chatId,
                    accounts.get(chatId)?.menuMessageId ?: -1L,
                    resetAccount,
                    pending,
                    con,
                    connections,
                    games,
                    bot
                )
            }
        }
    }
}

private fun nightSelection(
    town: Town,
    num: Int,
    chatId: Long,
    messageId: Long,
    bot: Bot
) {
    if (town.night.size > town.index) {
        val wake = town.night[town.index]
        town.selections.add(num)
        if (town.selections.size <= wake.type.choice) {
            bot.sendMessage(
                ChatId.fromId(chatId),
                "–ò–≥—Ä–æ–∫ –Ω–æ–º–µ—Ä $num –≤—ã–±—Ä–∞–Ω. –í—ã–±—Ä–∞–Ω–æ ${town.selections.size} / ${wake.type.choice} –∏–≥—Ä–æ–∫–æ–≤."
            )
        }
        if (wake.type.choice <= town.selections.size) {
            val players = town.selections.map {
                town.playerMap[it]
            }
            val arg = CoerceJavaToLua.coerce(players.toTypedArray())
            val script = town.scripts[wake.players.first().roleData.name]
            val priority =
                wake.players.filter { it.alive }.maxOfOrNull { it.roleData.priority } ?: 1
            val actors =
                wake.players.filter { it.roleData.priority == priority && it.alive }
                    .map { it.pos }
            if (script != null) {
                try {
                    script.set("CONST", CoerceJavaToLua.coerce(Const(actors, players, town)))
                    val scriptRes = script.get("action").call(arg)
                    val ret =
                        CoerceLuaToJava.coerce(
                            scriptRes,
                            Return::class.java
                        )
                    val actorsSet = actors.toSet()

                    if (ret !is Return) {
                        return
                    }

                    val text = ret.results.mapIndexed { _, res ->
                        val start =
                            res.desc() + " " + res.selection.joinToString {
                                desc(
                                    it,
                                    " - "
                                )
                            } + ": "
                        val text = if (res is InfoResult) {
                            val blocker =
                                town.actions.firstOrNull {
                                    it is BlockResult
                                            && it.selection.map { it?.pos ?: -1 }.toSet()
                                        .intersect(actorsSet).isNotEmpty()
                                }
                            val result = res.text
                            town.actions.add(
                                InfoResult(
                                    if (blocker == null) result else "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
                                    actors,
                                    res.selection
                                )
                            )
                            res.text
                            start + if (blocker == null) result else "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
                        } else {
                            if (res is NoneResult) {
                                return
                            }
                            if (res is Result) {
                                res.selection.filterNotNull().forEach {
                                    try {
                                        val pos = it.pos
                                        val lua =
                                            town.scripts[town.playerMap[pos]?.roleData?.name]
                                        lua?.set(
                                            "CONST",
                                            CoerceJavaToLua.coerce(
                                                Const(
                                                    listOf(pos),
                                                    wake.players,
                                                    town
                                                )
                                            )
                                        )
                                        val pArg = CoerceJavaToLua.coerce(res)

                                        val passive = lua?.get("passive")?.call(pArg)?.let {
                                            CoerceLuaToJava.coerce(
                                                it,
                                                Return::class.java
                                            )
                                        }

                                        town.actions.add(res)
                                        if (passive != null && passive is Return) {
                                            for (result in passive.results) {
                                                if (result !is NoneResult) {
                                                    town.actions.add(result)
                                                }
                                            }
                                        }
                                    } catch (e: Exception) {
                                        e.printStackTrace()
                                    }
                                }
                            }
                            start + "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ"
                        }
                        return@mapIndexed text
                    }.joinToString("\n")
                    town.index++
                    bot.sendMessage(
                        ChatId.fromId(chatId),
                        if (ret.results.isNotEmpty()) text else "–†–æ–ª—å –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π",
                        replyMarkup = inlineKeyboard {
                            if (town.index >= town.night.size) {
                                button(dayCommand, -1L)
                            } else {
                                // todo replace -1L with messageId
                                button(nextRoleCommand, -1L)
                            }
                        }
                    )
                } catch (e: Exception) {
                    e.printStackTrace()
                }
            }
            return
        }
    }
}

private fun handleMigrations() {
    if (internal.get("migration") == null) {
        runBlocking {
            migrate(accountsMongo, accounts, AccountOld::toAccount)
            migrate(gamesMongo, games)
            //migrate(connectionsMongo, connections)
            migrate(pendingMongo, pending)
            migrate(adsMongo, ads)
            migrate(bombsMongo, bombs)
            migrate(checksMongo, checks)
            migrate(kicksMongo, kicks)
            //migrate(modesMongo, modes)
            migrate(selectionsMongo, selections)
            migrate(hostInfosMongo, hostInfos)
            migrate(hostRequestsMongo, hostRequests)
            migrate(adminsMongo, admins)
            migrate(adminMenusMongo, adminMenus)
            migrate(timersMongo, timers)
        }
        internal.save("migration")
    }
}

private fun deleteUserTimers(
    timers: Collection<Timer, Long>,
    bot: Bot,
    filter: Timer.() -> Boolean
) {
    val timerList = mutableListOf<Timer>()
    timers.find(filter).forEach {
        timerList.add(it)
    }
    timerList.forEach {
        deleteTimer(timers, it, bot)
    }
}

fun deleteTimer(
    timers: Collection<Timer, Long>,
    it: Timer,
    bot: Bot
) {
    timers.delete(it.chatId)
    bot.deleteMessage(ChatId.fromId(it.chatId), it.messageId)
}

private fun updateTimer(
    timer: Timer,
    bot: Bot,
    timers: Collection<Timer, Long>
) {
    val text = timerText(timer.time)
    bot.editMessageText(
        ChatId.fromId(timer.chatId),
        timer.messageId,
        text = text,
        replyMarkup = inlineKeyboard {
            row {
                button(timerResetCommand, timer.chatId)
                button(
                    timerStateCommand named (if (timer.active) "‚è∏Ô∏è" else "‚ñ∂Ô∏è"),
                    timer.chatId
                )
                button(timerDeleteCommand, timer.chatId)
            }
        }
    )
    timers.update(timer.chatId) { updated = false }
}

private fun timerText(time: Long): String {
    val timePassed = time / 1000
    val min = (timePassed / 60).toString().padStart(2, '0')
    val sec = (timePassed % 60).toString().padStart(2, '0')
    val text = "–¢–∞–π–º–µ—Ä: $min:$sec"
    return text
}

fun showHostSettings(
    messageId: Long,
    hostInfos: Collection<HostInfo, Long>,
    accounts: Collection<Account, Long>,
    chatId: Long,
    bot: Bot
) {
    bot.editMessageReplyMarkup(
        ChatId.fromId(chatId),
        messageId,
        replyMarkup = inlineKeyboard {
            button(blankCommand named "–°–ø–∏—Å–æ–∫ –≤–µ–¥—É—â–∏—Ö")
            hostInfos.find().forEach {
                accounts.get(it.chatId)?.let { acc ->
                    row {
                        button(blankCommand named acc.fullName())
                        button(deleteHostCommand, it.chatId, messageId)
                    }
                    row {
                        button(blankCommand named "üéÆ")
                        if (it.gameLimit) {
                            button(gameLimitOnCommand named it.left.toString(), it.chatId, messageId)
                            button(gameLimitOffCommand, it.chatId, messageId)
                        } else {
                            button(gameLimitOnCommand, it.chatId, messageId)
                        }
                    }
                    row {
                        button(blankCommand named "‚è∞")
                        if (it.timeLimit) {
                            button(timeLimitOnCommand named it.until.toString(), it.chatId, messageId)
                            button(timeLimitOffCommand, it.chatId, messageId)
                        } else {
                            button(timeLimitOnCommand, it.chatId, messageId)
                        }
                    }
                    row {
                        button(blankCommand named "üë•")
                        button(shareCommand named if (it.canShare) "On" else "Off", it.chatId, messageId)
                    }
                }
            }
            button(adminBackCommand, messageId)
        }
    )
}

fun showHostRequests(
    hostRequests: Collection<UserId, Long>,
    accounts: Collection<Account, Long>,
    messageId: Long,
    chatId: Long,
    bot: Bot
) {
    bot.editMessageReplyMarkup(
        ChatId.fromId(chatId),
        messageId,
        replyMarkup = inlineKeyboard {
            button(blankCommand named "–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–µ–¥–µ–Ω–∏–µ")
            hostRequests.find().forEach {
                accounts.get(it.chatId)?.let { acc ->
                    button(blankCommand named acc.fullName())
                    row {
                        button(allowHostCommand, it.chatId, messageId)
                        button(denyHostCommand, it.chatId, messageId)
                    }
                }
            }
            button(adminBackCommand, messageId)
        }
    )
}

fun showAdmin(
    checks: Collection<Check, String>,
    chatId: Long,
    messageId: Long,
    bot: Bot
) {
    bot.editMessageReplyMarkup(
        ChatId.fromId(chatId),
        messageId,
        replyMarkup = inlineKeyboard {
            CheckOption.entries.forEach {
                row {
                    button(blankCommand named it.display)
                    button(
                        updateCheckCommand named (if (checks.get(it)) "‚úÖ" else "‚ùå"),
                        it.key,
                        messageId
                    )
                }
            }
            button(hostRequestCommand, messageId)
            button(hostSettingsCommand, messageId)
            button(deleteMsgCommand, messageId)
        }
    )
}

fun updateCheck(
    param: String,
    checks: Collection<Check, String>
) {
    val check = checks.get(param)
    if (check == null) {
        checks.save(Check(ObjectId(), param, true))
    } else {
        checks.update(param) {
            state = !check.state
        }
    }
}

fun canHost(
    checks: Collection<Check, String>,
    hostInfos: Collection<HostInfo, Long>,
    filter: HostInfo.() -> Boolean,
    hostRequests: Collection<UserId, Long>,
    chatId: Long
): Boolean {
    val canHost = if (checks.get(CheckOption.HOST_KNOWN)) {
        try {
            hostInfos.find(filter).first()
            true
        } catch (e: NoSuchElementException) {
            false
        }
    } else {
        true
    }

    if (checks.get(CheckOption.HOST_REQUEST)) {
        hostRequests.save(UserId(ObjectId(), chatId))
    }
    return canHost
}

private fun leaveGame(
    accounts: Collection<Account, Long>,
    chatId: Long,
    messageId: Long,
    resetAccount: Account.() -> Unit,
    pending: Collection<Pending, Long>,
    con: Connection,
    connections: Collection<Connection, ObjectId>,
    games: Collection<Game, ObjectId>,
    bot: Bot
) {
    accounts.update(chatId, resetAccount)

    games.get(con.gameId)?.host?.let {
        pending.save(Pending(ObjectId(), it))
    }
    connections.deleteMany { player == chatId }
    bot.deleteMessage(
        ChatId.fromId(chatId),
        messageId
    )
    showMenu(chatId, games, accounts, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", bot, true)
}

private fun settingsButtons(
    it: GameMode,
    messageId: Long,
    gameMessageId: Long
) = inlineKeyboard {
    button(
        fallModeCommand named "–†–µ–∂–∏–º —Ñ–æ–ª–ª–æ–≤: " + if (it.fallMode) "–í–∫–ª—é—á–µ–Ω" else "–û—Ç–∫–ª—é—á–µ–Ω",
        messageId,
        gameMessageId
    )
    button(
        detailedViewCommand named "–ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: " + if (it.detailedView) "–í–∫–ª—é—á–µ–Ω" else "–û—Ç–∫–ª—é—á–µ–Ω",
        messageId,
        gameMessageId
    )
    button(deleteMsgCommand named "–ó–∞–∫—Ä—ã—Ç—å", messageId)
}

fun startGame(
    accounts: Collection<Account, Long>,
    setups: Collection<Setup, ObjectId>,
    roles: Collection<Role, ObjectId>,
    path: String,
    pairings: Collection<Pairing, ObjectId>,
    orders: Collection<TypeOrder, ObjectId>,
    types: Collection<Type, ObjectId>,
    chatId: Long,
    towns: MutableMap<Long, Town>,
    roleNameLen: Int,
    roleDescLen: Int,
    games: Collection<Game, ObjectId>,
    bot: Bot,
    modes: Collection<GameMode, ObjectId>
) {
    try {
        games.find { host == chatId }.singleOrNull()?.let { game ->
            gameHistory.save(GameSummary(ObjectId(), game, connections.find { gameId == game.id }))

            accounts.update(chatId) {
                menuMessageId = -1L
            }
            val roleMap = getRoles(setups, game, roles)
            //val roleDesc = roleDesc(roleMap)

            val scriptMap = roleMap.keys.filter { it.scripted }.associate {
                val lua = Globals()
                lua.load(JseBaseLib())
                lua.load(PackageLib())
                LoadState.install(lua)
                LuaC.install(lua)
                lua.get("dofile").call(LuaValue.valueOf("$path/scripts/${it.script}.lua"))
                it.name to lua
            }


            val pairs = mutableListOf<Pairing>()
            pairings.find { gameId == game.id }.forEach {
                pairs.add(it)
            }

            val orderList = mutableListOf<TypeOrder>()
            orders.find { gameId == game.id }.forEach {
                orderList.add(it)
            }
            val typeList = mutableListOf<Type>()
            types.find { gameId == game.id }.forEach {
                typeList.add(it)
            }
            val mode = modes.find { gameId == game.id }.singleOrNull()?.mode ?: Mode.OPEN
            val town1 = Town(
                chatId,
                pairs.mapNotNull {
                    val con = connections.get(it.connectionId)
                    val role = roles.get(it.roleId)
                    if (con != null && role != null) {
                        Person(
                            con.pos,
                            con.name(),
                            role,
                            role.defaultTeam
                        )
                    } else {
                        null
                    }
                },
                orderList.sortedBy { it.pos }.map { it.type },
                typeList.associateBy { it.name },
                scriptMap,
                mode
            )
            towns[chatId] = town1


            for (it in pairs) {
                val con = connections.get(it.connectionId)
                val role = roles.get(it.roleId)
                if (con != null && role != null && !con.bot) {
                    /*bot.sendMessage(
                                                    ChatId.fromId(it.connection.player),
                                                    roleDesc
                                                )*/
                    try {
                        bot.sendMessage(
                            ChatId.fromId(con.player),
                            "–í–µ–¥—É—â–∏–π –Ω–∞—á–∞–ª –∏–≥—Ä—É",
                            replyMarkup = footerKeyboard {
                                button(leaveGameCommand)
                            }
                        )
                        bot.sendMessage(
                            ChatId.fromId(con.player),
                            "–í–∞—à–∞ —Ä–æ–ª—å: <span class=\"tg-spoiler\">${role.name.padEnd(roleNameLen, '_')}</span>\n" +
                                    "–û–ø–∏—Å–∞–Ω–∏–µ: <span class=\"tg-spoiler\">${
                                        role.desc.padEnd(
                                            roleDescLen,
                                            '_'
                                        )
                                    }</span>",
                            parseMode = ParseMode.HTML,
                            replyMarkup = inlineKeyboard {
                                button(gameInfoCommand, game.id)
                            }
                        )
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                }
            }

            games.updateMany(
                { host == chatId },
                { state = GameState.Game }
            )
            bot.sendMessage(
                ChatId.fromId(chatId),
                "–†–æ–ª–∏ –≤ –∏–≥—Ä–µ:\n" + roleMap.entries
                    .filter { it.value > 0 }
                    .sortedBy { it.key.index }
                    .joinToString("\n") { "- " + it.key.name },
                replyMarkup = dayKeyboard()
            )

            accounts.update(chatId) {
                menuMessageId = -1L
            }
            towns[chatId]?.let { town ->
                showDay(town, chatId, -1L, towns, accounts, bot, "", "", modes, game)
            }
        }
    } catch (e: Exception) {
        e.printStackTrace()
    }
}

private fun getPlayerDescs(
    checks: Collection<Check, String>,
    connection: Connection,
    pairings: Collection<Pairing, ObjectId>,
    town: Town,
    games: Collection<Game, ObjectId>
): List<String> {
    val conMap = mutableMapOf<ObjectId, List<String>>()
    val wakeMap = mutableMapOf<String, MutableList<Pairing>>()
    games.get(connection.gameId)?.let { game ->
        val pairs = mutableMapOf<ObjectId, Pairing>()
        pairings.find { gameId == game.id }.forEach {
            pairs[it.connectionId] = it
        }
        for (pair in pairs.values) {
            val role = roles.get(pair.roleId)!!
            val types = if (role.scripted) {
                val script = town.scripts[role.name]
                val arg = CoerceJavaToLua.coerce(town.players.toTypedArray())
                script?.get("type")?.call(arg)?.toString() ?: "none"
            } else {
                "none"
            }.split(",")
            types.forEach {
                wakeMap.getOrPut(it) { mutableListOf() }.add(pair)
            }
            conMap[pair.connectionId] = types
        }

        pairs[connection.id]?.let {
            val names = checks.get(CheckOption.NAMES)
            val cover = checks.get(CheckOption.COVER)
            val players =
                if (!names || !conMap.containsKey(it.connectionId) || "none" in (conMap[it.connectionId]
                        ?: emptyList())
                ) {
                    emptyList()
                } else {
                    conMap[it.connectionId]
                        ?.asSequence()
                        ?.flatMap { wakeMap[it] ?: emptyList() }
                        ?.toSet()
                        ?.map { connections.get(it.connectionId) to roles.get(it.roleId) }
                        ?.sortedBy { it.first?.pos ?: -1 }
                        ?.map {
                            "‚Ññ${it.first!!.pos} - " + it.first!!.name() + " - " + it.second!!.name(
                                cover
                            )
                        }
                        ?.toList()
                        ?: emptyList()
                }
            return players
        }
    }
    return emptyList()
}

private fun Collection<Check, String>.get(option: CheckOption) =
    (get(option.key)?.state ?: false)

private fun getRoles(
    setups: Collection<Setup, ObjectId>,
    game: Game,
    roles: Collection<Role, ObjectId>
): MutableMap<Role, Int> {
    val roleMap = mutableMapOf<Role, Int>()
    setups.find { gameId == game.id }.forEach { setup ->
        roles.get(setup.roleId)?.let { role ->
            roleMap[role] = setup.count
        }
    }
    return roleMap

}

private fun roleDesc(roleMap: MutableMap<Role, Int>): String {
    var roleDesc = "<b>–†–æ–ª–∏ –≤ –∏–≥—Ä–µ</b>:\n\n"
    for (entry in roleMap.entries.sortedBy { it.key.index }) {
        if (entry.value > 0) {
            roleDesc += "<b>" + entry.key.name + "</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${entry.value}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${entry.key.desc}\n\n"
        }
    }
    roleDesc = roleDesc.dropLast(2)
    return roleDesc
}

fun updateSetup(
    path: String,
    roles: Collection<Role, ObjectId>,
    game: Game,
    types: Collection<Type, ObjectId>,
    orders: Collection<TypeOrder, ObjectId>
) {
    val json = File("$path/scripts/template.json").readText()
    println(json)
    try {
        val data = Json.decodeFromString<GameSet>(json)

        roles.deleteMany { gameId == game.id }
        data.roles.forEachIndexed { index, it ->
            val role = Role(
                ObjectId(),
                game.id,
                it.name,
                it.desc,
                it.scripted,
                it.defaultTeam,
                it.script,
                it.priority,
                it.coverName,
            )
            role.index = index
            roles.save(
                role
            )
        }
        types.deleteMany { gameId == game.id }
        data.type.forEach {
            types.save(Type(ObjectId(), game.id, it.name, it.choice))
        }
        orders.deleteMany { gameId == game.id }
        data.order.forEachIndexed { index, s ->
            orders.save(TypeOrder(ObjectId(), game.id, s, index))
        }
    } catch (e: Exception) {
        e.printStackTrace()
    }
}

private fun showNumPrompt(
    chatId: Long,
    messageId: Long,
    bot: Bot,
    connectionId: ObjectId
): Long {
    val chat = ChatId.fromId(chatId)
    val msgId = if (messageId == -1L) {
        bot.sendMessage(
            chat,
            "–ú–µ–Ω—é –∏–≥—Ä–æ–∫–∞:"
        ).get().messageId
    } else {
        messageId
    }
    bot.editMessageReplyMarkup(
        chat,
        msgId,
        replyMarkup = numpadKeyboard(
            "–ù–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞",
            playerNumCommand,
            playerConfirmCommand,
            mainMenuCommand,
            connectionId,
            0,
            msgId
        )
    )
    return msgId
}

private fun dayKeyboard() = footerKeyboard {
    button(stopGameCommand)
}

private fun showNightRole(
    town: Town,
    chatId: Long,
    bot: Bot
) {
    town.selections.clear()
    val wake = if (town.night.size > town.index) town.night[town.index] else null
    if (wake == null) {
        bot.sendMessage(
            ChatId.fromId(chatId),
            "–ù–æ—á—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            replyMarkup = inlineKeyboard {
                // todo replace -1L with messageId
                button(dayCommand, -1L)
            }
        )
        //startDay(town, chatId, towns, accounts, bot)
        return
    }
    val players = wake.players.sortedBy { it.roleData.priority }.reversed()
    val alive = players.filter { it.alive }
    val action =
        alive.firstOrNull()?.roleData?.desc ?: "–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –º–µ—Ä—Ç–≤—ã."
    bot.sendMessage(
        ChatId.fromId(chatId),
        "–ü—Ä–æ—Å—ã–ø–∞—é—Ç—Å—è: " + players.map { it.roleData.name }.toSet().joinToString(", ") + "\n" +
                "–î–µ–π—Å—Ç–≤–∏–µ: " + action + "\n" +
                "–ò–≥—Ä–æ–∫–∏: " + players.filter { it.alive }.joinToString(", ") { desc(it, " - ") } +
                if (alive.isNotEmpty()) "\n\n–í—ã–±–µ—Ä–∏—Ç–µ ${wake.type.choice} –∏–≥—Ä–æ–∫–æ–≤:" else "",
        replyMarkup = inlineKeyboard {
            if (alive.isEmpty()) {
                // todo replace -1L with messageId
                button(skipRoleCommand named "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", -1L)
            } else {
                reordered(town.players.filter { it.alive }.sortedBy { it.pos }).chunked(2).forEach {
                    row {
                        it.forEach {
                            // todo replace -1L with messageId
                            button(selectCommand named desc(it), it.pos, -1L)
                        }
                        if (it.size == 1) {
                            button(blankCommand)
                        }
                    }
                }
            }
        }
    )
}

fun startDay(
    town: Town,
    chatId: Long,
    towns: MutableMap<Long, Town>,
    accounts: Collection<Account, Long>,
    bot: Bot,
    modes: Collection<GameMode, ObjectId>,
    game: Game
) {
    town.day++
    val fullLog = fullLog(town)
    town.endNight()
    // todo replace -1L with messageId
    showDay(town, chatId, -1L, towns, accounts, bot, fullLog, shortLog(town), modes, game)
}

private fun showDay(
    town: Town,
    chatId: Long,
    messageId: Long,
    towns: MutableMap<Long, Town>,
    accounts: Collection<Account, Long>,
    bot: Bot,
    fullLog: String,
    shortLog: String,
    modes: Collection<GameMode, ObjectId>,
    game: Game
) {
    val mode = modes.get(game.id)
    val view = mode?.dayView ?: DayView.ALL
    val fallMode = mode?.fallMode ?: false
    val keyboard = inlineKeyboard {
        row { button(filterCommand named "–§–∏–ª—å—Ç—Ä: ${view.desc}", messageId) }
        for (player in town.players.sortedBy { it.pos }) {
            if (view.filter(player)) {
                row {
                    button((if (mode?.detailedView == true) blankCommand else dayDetailsCommand) named desc(player), player.pos, messageId)
                }
                if (mode?.detailedView == true) {
                    row {
                        playerDayDesc(player, messageId, fallMode)
                    }
                }
            }
        }
        button(settingsCommand, messageId)
        button(timerCommand)
        button(nightCommand, messageId)
    }

    withAccount(accounts, chatId) { acc ->
        if (acc.menuMessageId != -1L) {
            bot.editMessageReplyMarkup(
                ChatId.fromId(chatId),
                acc.menuMessageId,
                replyMarkup = keyboard
            )
            return@withAccount
        }

        if (fullLog.isNotBlank()) {
            bot.sendMessage(
                ChatId.fromId(chatId),
                "–í—Å–µ —Å–æ–±—ã—Ç–∏—è:\n${fullLog}"
            )
        }

        bot.sendMessage(
            ChatId.fromId(chatId),
            "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ—á–∏:\n" + shortLog.ifBlank { "–ù–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π" }
        )
        town.actions.clear()

        val mapAll = mutableMapOf<String, Int>()
        val mapAlive = mutableMapOf<String, Int>()
        val teamSet = mutableSetOf("all")
        for (player in town.players) {
            teamSet.add(player.team)

            mapAll.getOrPut("all") { 0 }.let {
                mapAll["all"] = it + 1
            }
            mapAll.getOrPut(player.team) { 0 }.let {
                mapAll[player.team] = it + 1
            }

            if (player.alive) {
                mapAlive.getOrPut("all") { 0 }.let {
                    mapAlive["all"] = it + 1
                }
                mapAlive.getOrPut(player.team) { 0 }.let {
                    mapAlive[player.team] = it + 1
                }
            }
        }
        bot.sendMessage(
            ChatId.fromId(chatId),
            "–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–Ω—å",
            replyMarkup = dayKeyboard()
        )
        val res = bot.sendMessage(
            ChatId.fromId(chatId),
            "–î–µ–Ω—å ${towns[chatId]?.day}\n" +
                    "–í–∂–∏–≤—ã—Ö:\n" + teamSet.joinToString("\n") {
                it + ": " + mapAlive.getOrDefault(it, 0) + " / " + mapAll.getOrDefault(it, 0)
            },
            replyMarkup = keyboard
        )
        if (res.isSuccess) {
            accounts.update(chatId) {
                menuMessageId = res.get().messageId
            }
        }
    }
}

private fun KeyboardContext.RowContext.playerDayDesc(
    player: Person,
    messageId: Long,
    fallMode: Boolean
) {
    button(
        statusCommand named
                "–°—Ç–∞—Ç—É—Å: " + if (player.protected) "–ó–∞—â–∏—â–µ–Ω" else if (player.alive) "–ñ–∏–≤" else "–ú–µ—Ä—Ç–≤",
        player.pos,
        messageId
    )
    if (player.alive) {
        button(killCommand, player.pos, messageId)
    } else {
        button(reviveCommand, player.pos, messageId)
    }
    if (fallMode) {
        button(
            fallCommand named "" + numbers[player.fallCount % numbers.size],
            player.pos,
            messageId
        )
    }
}

fun shortLog(town: Town): String {
    return if (town.actions.isNotEmpty()) {
        val set = mutableSetOf<Pair<KClass<out Action>, Int>>()
        val text =
            town.actions.asSequence().filter { !it.blocked }.map { it.actions() }.flatten().sortedBy { it.pos }.map {
                val pair = it::class to it.pos
                if (pair !in set) {
                    set.add(pair)
                    "–ò–≥—Ä–æ–∫ –Ω–æ–º–µ—Ä ${it.pos} ${it.desc()}"
                } else {
                    null
                }
            }.filterNotNull().joinToString("\n")
        text
    } else {
        ""
    }
}

private fun fullLog(town: Town): String {
    return if (town.actions.isNotEmpty()) {
        val text = town.actions.mapIndexed { i, it ->
            val action = actionDesc(it)

            val alive = it.actors.mapNotNull { town.playerMap[it] }.filter { it.alive }
            val who = if (alive.isNotEmpty()) {
                alive.joinToString(", ") { desc(it) }
            } else {
                "–î–µ–π—Å—Ç–≤—É—é—â–µ–µ –ª–∏—Ü–æ –Ω–µ —É–∫–∞–∑–Ω–æ"
            }
            val target = it.selection.joinToString { desc(it, " - ") }
            "–°–æ–±—ã—Ç–∏–µ ${i + 1}.\n" +
                    "–ö—Ç–æ: $who\n" +
                    "–î–µ–π—Å—Ç–≤–∏–µ: $action\n" +
                    "–¶–µ–ª—å: $target\n" +
                    (if (it is InfoResult) "–†–µ–∑—É–ª—å—Ç–∞—Ç: ${it.text}" else "")
        }.joinToString("\n\n")
        text
    } else {
        ""
    }
}

private fun actionDesc(it: Result): String = it.desc()

private fun desc(player: Person?, sep: String = ". ") = if (player != null)
    "${player.pos}$sep${player.name} (${player.roleData.name})"
else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫"

//private fun desc(player: Person, sep: String = ". ") = "${player.pos}$sep${player.name} (${player.role.name})"

@OptIn(ExperimentalSerializationApi::class)
fun initAccount(
    userName: String,
    accounts: Collection<Account, Long>,
    chatId: Long,
    bot: Bot
) {
    if (accounts.get(chatId) == null) {
        accounts.save(Account(ObjectId(), chatId, userName))
    } else {
        accounts.update(chatId) {
            state = AccountState.Init
            menuMessageId = -1L
            hostMessageId = -1L
            setupMessageId = -1L
            dayMessageId = -1L
            connectionId = null
        }
    }
    bot.sendMessage(
        ChatId.fromId(chatId),
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è. –≠—Ç–æ –∏–º—è —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤–µ–¥—É—â–∏–µ –∏–≥—Ä, –∫ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç–µ—Å—å.",
        replyMarkup = ReplyKeyboardRemove(true)
    )
}

fun showMenu(
    chatId: Long,
    games: Collection<Game, ObjectId>,
    accounts: Collection<Account, Long>,
    menuText: String,
    bot: Bot,
    forceUpdate: Boolean = false,
    silent: Boolean = false
) {
    bot.sendMessage(
        ChatId.fromId(chatId),
        menuText,
        disableNotification = silent,
        replyMarkup = footerKeyboard {
            button(changeNameCommand)
        }
    )
    showGames(chatId, -1L, bot, games, accounts, forceUpdate)
}

private fun showLobby(
    chatId: Long,
    messageId: Long,
    connections: Collection<Connection, ObjectId>,
    game: Game,
    bot: Bot,
    accounts: Collection<Account, Long>,
    forceUpdate: Boolean = false
): Long {
    val id = ChatId.fromId(chatId)
    var msgId = messageId
    if (forceUpdate || msgId == -1L) {
        val res = bot.sendMessage(
            id,
            text = "–ú–µ–Ω—é –≤–µ–¥—É—â–µ–≥–æ:"
        )
        if (res.isSuccess) {
            accounts.update(chatId) {
                msgId = res.get().messageId
            }
        }
    }
    bot.editMessageReplyMarkup(
        id,
        msgId,
        replyMarkup = lobby(msgId, connections, game)
    )
    return msgId
}

fun showRoles(
    chatId: Long,
    messageId: Long,
    setups: Collection<Setup, ObjectId>,
    connections: Collection<Connection, ObjectId>,
    bot: Bot,
    game: Game
) {
    val players = connections.find { gameId == game.id }
    val pairs = pairings.find { gameId == game.id }
    val gameSetups = setups.find { gameId == game.id }
    val keyboard = inlineKeyboard {
        gameSetups.sortedBy { it.index }.chunked(2).forEach {
            val left = it[0]
            val right = if (it.size > 1) it[1] else null
            row {
                button(roleCommand named left.role, left.roleId, messageId)
                if (right != null) {
                    button(roleCommand named right.role, right.roleId, messageId)
                } else {
                    button(blankCommand)
                }
            }
            row {
                button(decrCommand, left.id, messageId)
                button(blankCommand named left.count.toString())
                button(incrCommand, left.id, messageId)
                if (right != null) {
                    button(decrCommand, right.id, messageId)
                    button(blankCommand named right.count.toString())
                    button(incrCommand, right.id, messageId)
                } else {
                    button(blankCommand)
                    button(blankCommand)
                    button(blankCommand)
                }
            }
        }
        row {
            button(command("–ò–≥—Ä–æ–∫–æ–≤: ${players.size}", "default"))
        }
        row {
            button(blankCommand named "–í—ã–±—Ä–∞–Ω–æ —Ä–æ–ª–µ–π: ${gameSetups.sumOf { it.count }}")
        }
        button(resetRolesCommand, game.id, messageId)
        if (pairs.isNotEmpty()) {
            row {
                button(updateRolesCommand, game.id, messageId)
            }
        }
        row {
            button(menuLobbyCommand, messageId)
            if (pairs.isNotEmpty()) {
                button(menuPreviewCommand, messageId)
            } else {
                button(previewCommand, game.id, messageId)
            }
        }
    }
    bot.editMessageReplyMarkup(
        ChatId.fromId(chatId),
        messageId,
        replyMarkup = keyboard
    )
}

fun showPreview(
    bot: Bot,
    chatId: Long,
    messageId: Long,
    pairings: Collection<Pairing, ObjectId>,
    connections: Collection<Connection, ObjectId>,
    game: Game
) {
    val players = connections.find { gameId == game.id }
    val pairs = pairings.find { gameId == game.id }.associateBy { it.connectionId }
    val keyboard = inlineKeyboard {
        players.sortedBy { it.pos }.forEach {
            val pair = pairs[it.id]
            row {
                button(
                    if (it.pos == Int.MAX_VALUE) positionCommand
                    else (positionCommand named it.pos.toString()),
                    it.id,
                    0,
                    messageId
                )
                button(detailsCommand named it.name(), it.id, messageId)
                button(blankCommand named (pair?.roleId?.let { id -> roles.get(id)?.name } ?: "–†–æ–ª—å –Ω–µ –≤—ã–¥–∞–Ω–∞"))
            }
        }
        row {
            button(command("–ò–≥—Ä–æ–∫–æ–≤: ${players.size}", "default"))
        }
        row {
            button(blankCommand named "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ä–æ–ª–µ–π: ${pairs.size}")
        }
        button(updateRolesCommand, game.id, messageId)
        row {
            button(menuRolesCommand named "‚óÄÔ∏è –ú–µ–Ω—é —Ä–æ–ª–µ–π", messageId)
            button(gameCommand, game.id, messageId)
        }
    }
    bot.editMessageReplyMarkup(
        ChatId.fromId(chatId),
        messageId,
        replyMarkup = keyboard
    )
}

fun CallbackQueryHandlerEnvironment.withAccount(
    accounts: Collection<Account, Long>,
    func: (Account, Long) -> Unit
) {
    callbackQuery.message?.chat?.id?.let { chatId ->
        withAccount(accounts, chatId) { func(it, -1L) }
    }
}

fun withAccount(accounts: Collection<Account, Long>, chatId: Long, func: (Account) -> Unit) {
    accounts.get(chatId)?.let {
        func(it)
    }
}

fun menuButtons(
    messageId: Long,
    games: Collection<Game, ObjectId>,
    accounts: Collection<Account, Long>
): InlineKeyboardMarkup {
    return inlineKeyboard {
        games.find { state != GameState.Game }.forEach {
            accounts.get(it.host)?.let { host ->
                row {
                    button(joinCommand named host.fullName(), it.id, messageId)
                }
            }
        }
        row { button(updateCommand, messageId) }
    }
}

fun setupLayout() = KeyboardReplyMarkup(
    keyboard = listOf(
        listOf(KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Ä–æ–ª–µ–π")),
        listOf(KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"))
    ),
    resizeKeyboard = true
)

fun lobby(messageId: Long, connections: Collection<Connection, ObjectId>, game: Game): InlineKeyboardMarkup {
    val players = connections.find { gameId == game.id }
    return inlineKeyboard {
        val playerList = players.sortedWith(compareBy({ it.pos }, { it.createdAt }))
        val ordered = reordered(playerList)
        ordered.chunked(2).forEach {
            val first = it[0]
            row {
                button(detailsCommand named first.name(), first.id, messageId)
                button(
                    if (first.pos == Int.MAX_VALUE)
                        positionCommand
                    else positionCommand named first.pos.toString(),
                    first.id,
                    0,
                    messageId
                )
                if (it.size > 1) {
                    val second = it[1]
                    button(detailsCommand named second.name(), second.id, messageId)
                    button(
                        if (second.pos == Int.MAX_VALUE)
                            positionCommand
                        else positionCommand named second.pos.toString(),
                        second.id,
                        0,
                        messageId
                    )
                } else {
                    button(blankCommand)
                    button(blankCommand)
                }
            }
        }
        row {
            button(command("–ò–≥—Ä–æ–∫–æ–≤: ${players.size}", "default"))
        }
        row { button(dummyCommand, messageId) }
        row { button(menuKickCommand, messageId) }
        row { button(resetNumsCommand, messageId) }
        button(menuRolesCommand, messageId)
    }
}

private fun <T> reordered(list: List<T>) = with(ceil(list.size / 2.0).toInt()) {
    List(list.size) {
        list[if (it % 2 == 0) it / 2 else this + it / 2]
    }
}

fun showGames(
    chatId: Long,
    messageId: Long,
    bot: Bot,
    games: Collection<Game, ObjectId>,
    accounts: Collection<Account, Long>,
    forceUpdate: Boolean = false
) {
    var message = messageId
    if (message == -1L || forceUpdate) {
        val answer = bot.sendMessage(
            ChatId.fromId(chatId),
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–≥—Ä—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è):",
        )
        if (answer.isSuccess) {
            message = answer.get().messageId
        }
    }
    bot.editMessageReplyMarkup(
        ChatId.fromId(chatId),
        message,
        replyMarkup = menuButtons(message, games, accounts)
    )
}

data class Account(
    @BsonId val id: ObjectId,
    val chatId: Long,
    var userName: String,
    var name: String = "",
    var state: AccountState = AccountState.Init,
    var menuMessageId: Long = -1L,
    var hostMessageId: Long = -1L,
    var setupMessageId: Long = -1L,
    var dayMessageId: Long = -1L,
    var connectionId: ObjectId? = null
) {
    fun fullName() = name + if (userName.isNotBlank()) " (@$userName)" else ""
}

data class Game(
    @BsonId val id: ObjectId,
    var host: Long,
    var playerCount: Int = -1,
    var state: GameState = GameState.Connect,
    val createdAt: Date = Date()
) {
    val creator: Long = host
}

data class Connection(
    @BsonId val id: ObjectId,
    val gameId: ObjectId,
    val player: Long,
    var name: String = "",
    var handle: String = "",
    var bot: Boolean = false,
    var pos: Int = Int.MAX_VALUE,
) {
    val createdAt: Date = Date()
    fun name() = name + if (handle.isNotBlank()) " ($handle)" else ""
}

data class Pending(
    @BsonId val id: ObjectId,
    val host: Long,
    val date: Date = Date()
)

data class Role(
    @BsonId val id: ObjectId,
    val gameId: ObjectId,
    val name: String,
    val desc: String,
    val scripted: Boolean,
    val defaultTeam: String,
    val script: String = "",
    val priority: Int = 1,
    val coverName: String = "",
) {
    var index: Int = -1

    fun name(cover: Boolean = false): String {
        if (cover && coverName.isNotBlank()) {
            return coverName
        }
        return name
    }
}

data class Setup(
    @BsonId val id: ObjectId,
    var roleId: ObjectId,
    var gameId: ObjectId,
    var role: String,
    val index: Int,
    var count: Int = 0
)

data class Pairing(
    @BsonId val id: ObjectId,
    val gameId: ObjectId,
    val connectionId: ObjectId,
    val roleId: ObjectId
)

data class TypeOrder(
    @BsonId val id: ObjectId,
    val gameId: ObjectId,
    val type: String,
    val pos: Int
)

data class Bomb(
    @BsonId val id: ObjectId,
    val chatId: Long,
    val messageId: Long,
    val date: Date
)

data class Message(
    @BsonId val id: ObjectId,
    val text: String
)

data class Check(
    @BsonId val id: ObjectId,
    val name: String,
    var state: Boolean
)

data class Kick(
    @BsonId val id: ObjectId,
    val gameId: ObjectId,
    val player: Long
)

data class GameMode(
    @BsonId val id: ObjectId,
    val gameId: ObjectId,
    var mode: Mode,
    var dayView: DayView = DayView.ALL,
    var fallMode: Boolean = false,
    var detailedView: Boolean = false
)

enum class Mode(val type: String, val desc: String) {
    OPEN(
        "–û—Ç–∫—Ä—ã—Ç–∞—è",
        "–†–æ–ª—å –∏–≥—Ä–æ–∫–∞ –≤—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞–∑—ã–≤–∞—Ç—å —Ä–æ–ª–∏ –≤–æ–≤—Ä–µ–º—è –∏–≥—Ä—ã, –∞ —Ç–∞–∫–∂–µ —Å–ª–∏—à–∫–æ–º —è–≤–Ω–æ –Ω–∞ –Ω–∏—Ö –Ω–∞–º–µ–∫–∞—Ç—å."
    ),
    CLOSED(
        "–ó–∞–∫—Ä—ã—Ç–∞—è",
        "–ü–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫ –≤—ã—Ö–æ–∏—Ç –∏–∑ –∏–≥—Ä—ã –Ω–µ –Ω–∞–∑—ã–≤–∞—è —Ä–æ–ª–∏. –í–æ–≤—Ä–µ–º—è –∏–≥—Ä—ã –º–æ–∂–Ω–æ –Ω–∞–∑—ã–≤–∞—Ç—å —Ä–æ–ª–∏ –∏ –±–ª–µ—Ñ–æ–≤–∞—Ç—å."
    )
}

enum class DayView(val desc: String, val filter: (Person) -> Boolean) {
    ALL("–í—Å–µ –∏–≥—Ä–æ–∫–∏", { true }),
    ALIVE("–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏", { it.alive })
}

sealed class Action(
    val pos: Int,
    val actors: List<Int>
) {
    var blocked = false
    abstract fun desc(): String
}

class KillAction(
    pos: Int,
    actors: List<Int>
) : Action(pos, actors) {
    override fun desc(): String {
        return "—É–±–∏—Ç"
    }
}

class SilenceAction(
    pos: Int,
    actors: List<Int>
) : Action(pos, actors) {
    override fun desc(): String {
        return "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏"
    }
}

class Const(val actors: List<Int>, val selection: List<Person?>, val town: Town) {
    fun NONE() = NoneResult
    fun INFO(result: String) = Return(InfoResult(result, actors, selection))
    fun KILL() = KILL(selection)
    fun KILL(select: Person?) = KILL(listOf(select))
    fun KILL(select: List<Person?>) = Return(KillResult(actors, select))
    fun HEAL() = HEAL(selection)
    fun HEAL(select: Person?) = HEAL(listOf(select))
    fun HEAL(select: List<Person?>) = Return(HealResult(actors, select))
    fun BLOCK() = BLOCK(selection)
    fun BLOCK(select: Person?) = BLOCK(listOf(select))
    fun BLOCK(select: List<Person?>) = Return(BlockResult(actors, select))
    fun SILENCE() = SILENCE(selection)
    fun SILENCE(select: Person?) = SILENCE(listOf(select))
    fun SILENCE(select: List<Person?>) = Return(SilenceResult(actors, select))

    fun ALLOW() = Return(NoneResult)
    fun CANCEL(blocked: Result) = Return(CancelResult(blocked, actors, blocked.actors.map { town.playerMap[it] }))
    fun CANCEL(blocked: Return) = Return(
        blocked.results.map {
            CancelResult(it, actors, it.actors.map { town.playerMap[it] })
        }
    )

    fun STORE(value: Any) = town.store(value)
    fun STORED(key: Int) = town.get(key)

    fun IS_INFO(result: Result) = result is InfoResult
    fun IS_KILL(result: Result) = result is KillResult
    fun IS_HEAL(result: Result) = result is HealResult
    fun IS_BLOCK(result: Result) = result is BlockResult
    fun IS_SILENCE(result: Result) = result is SilenceResult

    fun GET_ACTORS() = actors.map { town.playerMap[it] }
    fun TWO(ret1: Return, ret2: Return) = Return(ret1.results + ret2.results)
    fun THREE(ret1: Return, ret2: Return, ret3: Return) = TWO(TWO(ret1, ret2), ret3)
}

data class Return(val results: List<Result>) {
    constructor(result: Result) : this(listOf(result))
}

sealed class Result(val actors: List<Int>, val selection: List<Person?>) {
    var blocked = false
    abstract fun desc(): String
    abstract fun actions(): List<Action>
}

class InfoResult(val text: String, actors: List<Int>, selection: List<Person?>) : Result(actors, selection) {
    override fun desc(): String {
        return "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
    }

    override fun actions(): List<Action> {
        return emptyList()
    }
}

sealed class TargetedResult(actors: List<Int>, selection: List<Person?>) : Result(actors, selection)
class KillResult(actors: List<Int>, selection: List<Person?>) : TargetedResult(actors, selection) {
    override fun desc(): String {
        return "–£–±–∏—Ç—å"
    }

    override fun actions(): List<Action> {
        return selection.filterNotNull().map { KillAction(it.pos, actors) }
    }
}

class HealResult(actors: List<Int>, selection: List<Person?>) : TargetedResult(actors, selection) {
    override fun desc(): String {
        return "–í—ã–ª–µ—á–∏—Ç—å"
    }

    override fun actions(): List<Action> {
        return emptyList()
    }
}

class BlockResult(actors: List<Int>, selection: List<Person?>) : TargetedResult(actors, selection) {
    override fun desc(): String {
        return "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª—å"
    }

    override fun actions(): List<Action> {
        return emptyList()
    }
}

class SilenceResult(actors: List<Int>, selection: List<Person?>) : TargetedResult(actors, selection) {
    override fun desc(): String {
        return "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ"
    }

    override fun actions(): List<Action> {
        return selection.filterNotNull().map { SilenceAction(it.pos, actors) }
    }
}

class CancelResult(val canceled: Result, actors: List<Int>, selection: List<Person?>) :
    TargetedResult(actors, selection) {
    override fun desc(): String {
        return "–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: ${canceled.desc()}"
    }

    override fun actions(): List<Action> {
        return emptyList()
    }
}

data object NoneResult : Result(emptyList(), emptyList()) {
    override fun desc(): String {
        return "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    }

    override fun actions(): List<Action> {
        return emptyList()
    }
}

data class Person(
    val pos: Int,
    val name: String,
    val roleData: Role,
    var team: String,
    var alive: Boolean = true,
    var protected: Boolean = false,
    var fallCount: Int = 0
) {
    fun isAlive() = alive
    fun getRole() = roleData.name
}

data class Type(
    @BsonId val id: ObjectId,
    val gameId: ObjectId,
    val name: String,
    val choice: Int
)

data class Wake(
    val type: Type,
    val players: List<Person>
)

data class Town(
    val host: Long,
    val players: List<Person>,
    val order: List<String>,
    val types: Map<String, Type>,
    val scripts: Map<String, Globals>,
    var mode: Mode = Mode.OPEN,
    var day: Int = 1
) {
    val playerMap = players.associateBy { it.pos }
    val actions = mutableListOf<Result>()
    val night = mutableListOf<Wake>()
    var index = 0
    val storage: MutableMap<Int, Any> = mutableMapOf()
    var storageIndex = 1

    val selections = mutableSetOf<Int>()

    fun setAlive(pos: Int, alive: Boolean) {
        players.firstOrNull { it.pos == pos }?.let {
            it.alive = alive
            if (alive) {
                actions.removeIf { res -> res is KillResult && it in res.selection }
            } else {
                actions.add(KillResult(emptyList(), listOf(it)))
            }
        }
    }

    fun changeProtected(pos: Int) {
        playerMap[pos]?.protected = !(playerMap[pos]?.protected ?: true)
    }

    fun store(value: Any): Int {
        storage[storageIndex] = value
        return storageIndex++
    }

    fun get(key: Int) = storage[key]

    fun rollback() {
        if (index == 0) {
            return
        }
        index--
        night[index].let {
            val actors = it.players.map { it.pos }.toSet()
            actions.removeIf { it.actors.any { it in actors } }
        }
    }

    fun prepNight() {
        val map = mutableMapOf<String, MutableList<Person>>()
        for (person in players) {
            if (person.roleData.scripted) {
                val script = scripts[person.roleData.name]
                val arg = CoerceJavaToLua.coerce(players.toTypedArray())
                script?.get("type")?.call(arg)?.toString() ?: "none"
            } else {
                "none"
            }.split(",").forEach {
                map.getOrPut(it.trim()) { mutableListOf() }.add(person)
            }
        }
        night.clear()
        index = 0
        for (type in order) {
            if ((map[type]?.size ?: 0) > 0 && (mode == Mode.CLOSED || (map[type]?.filter { it.alive }?.size
                    ?: 0) > 0)
            ) {
                night.add(Wake(types[type]!!, map[type]?.sortedBy { it.roleData.priority }?.reversed() ?: emptyList()))
            }
        }
    }

    fun updateTeams() {
        players.forEach {
            val script = scripts[it.roleData.name]
            val team = if (script == null) {
                it.team
            } else {
                val arg = CoerceJavaToLua.coerce(players.toTypedArray())
                script.get("team").call(arg).toString()
            }
            it.team = team
        }
    }

    fun endNight() {
        try {
            players.forEach { it.protected = false }
            /*val blockedActors = mutableSetOf<Int>()
            var index = 0
            while (index < actions.size) {
                val it = actions[index]
                if (it.actors.toSet().intersect(blockedActors).isNotEmpty()) {
                    it.blocked = true
                    index++
                    continue
                }
                when (it) {
                    is BlockResult -> {
                        blockedActors.addAll(it.selection.filterNotNull().map { it.pos })
                        index++
                        continue
                    }
                    is CancelResult -> TODO()
                    is HealResult -> TODO()
                    is KillResult -> TODO()
                    is SilenceResult -> {
                        it.selection.filterNotNull().forEach {
                            playerMap[it.pos]?.protected = true
                        }
                    }
                    else -> {}
                }
                index++
            }*/

            val blocks = actions.filterIsInstance<BlockResult>()
            for (block in blocks) {
                val select = block.selection.filterNotNull()
                actions.removeIf {
                    select.map { it.pos }.toSet().intersect(it.actors.toSet()).isNotEmpty()
                }
            }
            val cancels = actions.filterIsInstance<CancelResult>().map { it as CancelResult }
            for (cancel in cancels) {
                actions.remove(cancel.canceled)
            }
            val heals = actions.filterIsInstance<HealResult>().map { it as HealResult }
            for (heal in heals) {
                val select = heal.selection.filterNotNull()
                actions.removeIf {
                    select.intersect(it.selection.toSet()).isNotEmpty() && it is KillResult
                }
            }
            val kills = actions.filterIsInstance<KillResult>()
            for (it in kills) {
                it.selection.filterNotNull().forEach {
                    playerMap[it.pos]?.alive = false
                }
            }
            val mutes = actions.filterIsInstance<SilenceResult>()
            for (it in mutes) {
                it.selection.filterNotNull().forEach {
                    playerMap[it.pos]?.protected = true
                }
            }
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
}

@Serializable
data class GameSet(
    val name: String,
    val order: List<String>,
    val type: List<Choice>,
    val roles: List<RoleData>
)

@Serializable
data class Choice(
    val name: String,
    val choice: Int
)

@Serializable
data class RoleData(
    val name: String,
    val desc: String,
    val scripted: Boolean,
    val defaultTeam: String,
    val script: String,
    val priority: Int = 1,
    val coverName: String = ""
)

enum class AccountState {
    Init, Menu, Host, Lobby, Presets, Admin
}

enum class GameState {
    Connect, Roles, Preview, Game, Dummy, Rename, Num
}

data class Selection(
    @BsonId val id: ObjectId,
    val chatId: Long,
    val choice: String
)

data class HostInfo(
    @BsonId val id: ObjectId,
    val chatId: Long,
    var timeLimit: Boolean = false,
    var until: Date = Date(),
    var gameLimit: Boolean = false,
    var left: Int = -1,
    var canShare: Boolean = true
)

enum class CheckOption(val key: String, val display: String) {
    NAMES("names", "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ"),
    COVER("cover", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `coverName`"),
    HOST_KNOWN("host_known", "–¢–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–µ–¥—É—â–∏–µ"),
    HOST_REQUEST("host_request", "–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–µ–¥–µ–Ω–∏–µ")
}

data class UserId(
    @BsonId val id: ObjectId,
    val chatId: Long
)

enum class AdminState {
    NONE, HOST_TIME, HOST_GAMES
}

data class AdminMenu(
    @BsonId val id: ObjectId,
    val chatId: Long,
    var state: AdminState = AdminState.NONE,
    var editId: Long = -1,
    var messageId: Long = -1,
    var descId: Long = -1
)

data class Timer(
    @BsonId val id: ObjectId,
    val chatId: Long,
    val messageId: Long,
    var timestamp: Long,
    var time: Long,
    var active: Boolean = true,
    var updated: Boolean = true
)

data class GameSummary(
    val id: ObjectId,
    val game: Game,
    val connections: List<Connection>,
    val playedAt: Date = Date()
)

data class AdPopup(
    val id: ObjectId,
    val chatId: Long,
    val messageId: Long
)